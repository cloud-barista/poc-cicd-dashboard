{"version":"1.0","title":"CB-LADYBUG CI/CD Dashboard","lint":{"deadcode":{"run":1,"cnt":0,"details":""},"errcheck":{"run":1,"cnt":51,"details":"src/grpc-api/request/mcarapi.go:335:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(\"json\")\n\t           ^\nsrc/grpc-api/request/mcarapi.go:342:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(holdType)\n\t           ^\nsrc/grpc-api/request/mcarapi.go:364:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(\"json\")\n\t           ^\nsrc/grpc-api/request/mcarapi.go:367:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(holdType)\n\t           ^\nsrc/grpc-api/request/mcarapi.go:389:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(\"json\")\n\t           ^\nsrc/grpc-api/request/mcarapi.go:392:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(holdType)\n\t           ^\nsrc/grpc-api/request/mcarapi.go:414:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(\"json\")\n\t           ^\nsrc/grpc-api/request/mcarapi.go:417:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(holdType)\n\t           ^\nsrc/grpc-api/request/mcarapi.go:439:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(\"json\")\n\t           ^\nsrc/grpc-api/request/mcarapi.go:446:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(holdType)\n\t           ^\nsrc/grpc-api/request/mcarapi.go:468:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(\"json\")\n\t           ^\nsrc/grpc-api/request/mcarapi.go:471:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(holdType)\n\t           ^\nsrc/grpc-api/request/mcarapi.go:493:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(\"json\")\n\t           ^\nsrc/grpc-api/request/mcarapi.go:496:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(holdType)\n\t           ^\nsrc/grpc-api/request/mcarapi.go:518:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(\"json\")\n\t           ^\nsrc/grpc-api/request/mcarapi.go:521:13: Error return value of `m.SetInType` is not checked (errcheck)\n\tm.SetInType(holdType)\n\t           ^\nsrc/core/model/cluster.go:93:16: Error return value of `json.Unmarshal` is not checked (errcheck)\n\tjson.Unmarshal([]byte(keyValue.Value), &self)\n\t              ^\nsrc/core/model/cluster.go:135:18: Error return value of `json.Unmarshal` is not checked (errcheck)\n\t\t\tjson.Unmarshal([]byte(keyValue.Value), &cluster)\n\t\t\t              ^\nsrc/core/model/cluster.go:155:17: Error return value of `json.Unmarshal` is not checked (errcheck)\n\t\tjson.Unmarshal([]byte(nodeKeyValue.Value), &node)\n\t\t              ^\nsrc/core/model/node.go:72:16: Error return value of `json.Unmarshal` is not checked (errcheck)\n\tjson.Unmarshal([]byte(keyValue.Value), &self)\n\t              ^\nsrc/core/model/node.go:104:17: Error return value of `json.Unmarshal` is not checked (errcheck)\n\t\tjson.Unmarshal([]byte(keyValue.Value), &node)\n\t\t              ^\nsrc/grpc-api/cbadm/cmd/gclient.go:82:17: Error return value of `mcar.SetInType` is not checked (errcheck)\n\t\tmcar.SetInType(inType)\n\t\t              ^\nsrc/grpc-api/cbadm/cmd/gclient.go:83:18: Error return value of `mcar.SetOutType` is not checked (errcheck)\n\t\tmcar.SetOutType(outType)\n\t\t               ^\nsrc/core/model/spider/base.go:25:17: Error return value of `json.Unmarshal` is not checked (errcheck)\n\t\tjson.Unmarshal(resp.Body(), &status)\n\t\t              ^\nsrc/core/model/tumblebug/base.go:44:17: Error return value of `json.Unmarshal` is not checked (errcheck)\n\t\tjson.Unmarshal(resp.Body(), &status)\n\t\t              ^\nsrc/core/model/tumblebug/base.go:47:18: Error return value of `json.Unmarshal` is not checked (errcheck)\n\t\t\tjson.Unmarshal([]byte(status.Message), &status)\n\t\t\t              ^\nsrc/core/model/tumblebug/base.go:94:16: Error return value of `json.Unmarshal` is not checked (errcheck)\n\tjson.Unmarshal(resp.Body(), &d)\n\t              ^\nsrc/core/service/cluster.go:226:22: Error return value of `vm.ConnectionTest` is not checked (errcheck)\n\t\t\t\tvm.ConnectionTest(&sshInfo)\n\t\t\t\t                 ^\nsrc/core/service/cluster.go:231:17: Error return value of `cluster.Fail` is not checked (errcheck)\n\t\t\t\tcluster.Fail()\n\t\t\t\t            ^\nsrc/core/service/cluster.go:237:17: Error return value of `cluster.Fail` is not checked (errcheck)\n\t\t\t\tcluster.Fail()\n\t\t\t\t            ^\nsrc/core/service/cluster.go:243:17: Error return value of `cluster.Fail` is not checked (errcheck)\n\t\t\t\tcluster.Fail()\n\t\t\t\t            ^\nsrc/core/service/cluster.go:277:17: Error return value of `cluster.Fail` is not checked (errcheck)\n\t\t\t\tcluster.Fail()\n\t\t\t\t            ^\nsrc/core/service/cluster.go:285:17: Error return value of `cluster.Fail` is not checked (errcheck)\n\t\t\t\tcluster.Fail()\n\t\t\t\t            ^\nsrc/core/service/cluster.go:293:17: Error return value of `cluster.Fail` is not checked (errcheck)\n\t\t\t\tcluster.Fail()\n\t\t\t\t            ^\nsrc/core/service/cluster.go:311:17: Error return value of `cluster.Fail` is not checked (errcheck)\n\t\t\t\tcluster.Fail()\n\t\t\t\t            ^\nsrc/core/service/cluster.go:327:17: Error return value of `cluster.Fail` is not checked (errcheck)\n\t\t\t\tcluster.Fail()\n\t\t\t\t            ^\nsrc/core/service/cluster.go:334:18: Error return value of `cluster.Complete` is not checked (errcheck)\n\tcluster.Complete()\n\t                ^\nsrc/core/service/node.go:298:16: Error return value of `json.Unmarshal` is not checked (errcheck)\n\tjson.Unmarshal([]byte(keyValue.Value), cluster)\n\t              ^\nsrc/core/service/node.go:321:17: Error return value of `json.Unmarshal` is not checked (errcheck)\n\t\tjson.Unmarshal([]byte(keyValue.Value), &node)\n\t\t              ^\nsrc/core/service/node.go:352:17: Error return value of `json.Unmarshal` is not checked (errcheck)\n\t\tjson.Unmarshal([]byte(keyValue.Value), &node)\n\t\t              ^\nsrc/grpc-api/server/mcar/cluster.go:33:17: Error return value of `s.ClusterReqDef` is not checked (errcheck)\n\ts.ClusterReqDef(&mcarObj)\n\t               ^\nintegration-test/rest-scenario/setup.go:63:18: Error return value of `cbstore.InitData` is not checked (errcheck)\n\tcbstore.InitData()\n\t                ^\nintegration-test/rest-scenario/setup.go:72:9: Error return value of `cmd.Run` is not checked (errcheck)\n\tcmd.Run()\n\t       ^\nintegration-test/rest-scenario/setup.go:76:11: Error return value of `cmd.Start` is not checked (errcheck)\n\tcmd.Start()\n\t         ^\nintegration-test/rest-scenario/setup.go:99:7: Error return value of `` is not checked (errcheck)\n\t\tPost(\"http://localhost:31024/spider/driver\")\n\t\t    ^\nintegration-test/rest-scenario/setup.go:104:7: Error return value of `` is not checked (errcheck)\n\t\tPost(\"http://localhost:31024/spider/credential\")\n\t\t    ^\nintegration-test/rest-scenario/setup.go:109:7: Error return value of `` is not checked (errcheck)\n\t\tPost(\"http://localhost:31024/spider/region\")\n\t\t    ^\nintegration-test/rest-scenario/setup.go:114:7: Error return value of `` is not checked (errcheck)\n\t\tPost(\"http://localhost:31024/spider/connectionconfig\")\n\t\t    ^\nintegration-test/rest-scenario/setup.go:123:7: Error return value of `` is not checked (errcheck)\n\t\tPost(\"http://localhost:31323/tumblebug/ns\")\n\t\t    ^\nintegration-test/rest-scenario/setup.go:174:9: Error return value of `cmd.Run` is not checked (errcheck)\n\tcmd.Run()\n\t       ^\nintegration-test/rest-scenario/setup.go:176:18: Error return value of `cbstore.InitData` is not checked (errcheck)\n\tcbstore.InitData()\n\t                ^\n"},"staticcheck":{"run":1,"cnt":3,"details":"src/grpc-api/interceptors/jaegertracer/jaegertracer.go:25:25: SA1019: cfg.New is deprecated: use NewTracer() function (staticcheck)\n\ttracer, closer, err := cfg.New(jcConf.ServiceName, config.Logger(jaeger.NullLogger))\n\t                       ^\nsrc/grpc-api/common/cbserver.go:106:21: SA1019: prometheus.NewProcessCollector is deprecated: Use collectors.NewProcessCollector instead. (staticcheck)\n\t\t\treg.MustRegister(prometheus.NewProcessCollector(prometheus.ProcessCollectorOpts{}))\n\t\t\t                 ^\nsrc/grpc-api/common/cbserver.go:107:21: SA1019: prometheus.NewGoCollector is deprecated: Use collectors.NewGoCollector instead. (staticcheck)\n\t\t\treg.MustRegister(prometheus.NewGoCollector())\n\t\t\t                 ^\n"},"revive":{"run":1,"cnt":163,"details":"src/grpc-api/cbadm/cmd/gclient.go:45:26: var-declaration: should drop = nil from declaration of var mcar; it is the zero value (revive)\n\t\tmcar *lb_api.MCARApi = nil\n\t\t                       ^\nsrc/grpc-api/cbadm/cmd/gclient.go:38:38: unused-parameter: parameter 'args' seems to be unused, consider removing or renaming it as _ (revive)\nfunc SetupAndRun(cmd *cobra.Command, args []string) {\n                                     ^\nsrc/utils/lang/functions.go:113:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"%s %s : Type mismatch ex)10.244.0.0/16\", name, val))\n\t\t       ^\nsrc/utils/lang/functions.go:39:9: indent-error-flow: if block ends with a return statement, so drop this else and outdent its block (revive)\n\t} else {\n\t\treturn fmt.Sprintf(\"/ns/%s/clusters/%s\", namespace, clusterName)\n\t}\nsrc/utils/lang/functions.go:48:9: indent-error-flow: if block ends with a return statement, so drop this else and outdent its block (revive)\n\t} else {\n\t\treturn fmt.Sprintf(\"/ns/%s/clusters/%s/nodes/%s\", namespace, clusterName, nodeName)\n\t}\nsrc/utils/lang/functions.go:54:6: var-naming: func GetUid should be GetUID (revive)\nfunc GetUid() string {\n     ^\nsrc/utils/lang/functions.go:108:6: var-naming: func CheckIpCidr should be CheckIPCidr (revive)\nfunc CheckIpCidr(name string, val string) error {\n     ^\nsrc/core/model/tumblebug/firewall.go:17:2: var-naming: struct field CspSecurityGroupId should be CspSecurityGroupID (revive)\n\tCspSecurityGroupId   string          `json:\"cspSecurityGroupId\"`   // output\n\t^\nsrc/core/model/tumblebug/firewall.go:57:30: unused-parameter: parameter 'ns' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (self *Firewall) DELETE(ns string) error {\n                             ^\nsrc/core/model/tumblebug/vpc.go:17:2: var-naming: struct field CspVNetId should be CspVNetID (revive)\n\tCspVNetId    string     `json:\"cspVNetId\"`    // output\n\t^\nsrc/core/model/tumblebug/sshkey.go:50:28: unused-parameter: parameter 'ns' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (self *SSHKey) DELETE(ns string) error {\n                           ^\nsrc/core/model/tumblebug/image.go:14:2: var-naming: struct field CspImageId should be CspImageID (revive)\n\tCspImageId   string     `json:\"cspImageId\"`\n\t^\nsrc/core/model/tumblebug/spec.go:50:26: unused-parameter: parameter 'ns' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (self *Spec) DELETE(ns string) error {\n                         ^\nsrc/core/model/tumblebug/sshkey.go:27:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *SSHKey) GET() (bool, error) {\n\n\treturn self.execute(http.MethodGet, fmt.Sprintf(\"/ns/%s/resources/sshKey/%s\", self.namespace, self.Name), fmt.Sprintf(`{\"connectionName\" : \"%s\"}`, self.Config), &self)\n\n}\nsrc/core/model/tumblebug/firewall.go:41:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Firewall) GET() (bool, error) {\n\n\treturn self.execute(http.MethodGet, fmt.Sprintf(\"/ns/%s/resources/securityGroup/%s\", self.namespace, self.Name), fmt.Sprintf(`{\"connectionName\" : \"%s\"}`, self.Config), &self)\n\n}\nsrc/core/model/tumblebug/vpc.go:41:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VPC) GET() (bool, error) {\n\n\treturn self.execute(http.MethodGet, fmt.Sprintf(\"/ns/%s/resources/vNet/%s\", self.namespace, self.Name), fmt.Sprintf(`{\"connectionName\" : \"%s\"}`, self.Config), &self)\n\n}\nsrc/core/model/tumblebug/image.go:48:27: unused-parameter: parameter 'ns' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (self *Image) DELETE(ns string) error {\n                          ^\nsrc/core/model/tumblebug/firewall.go:47:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Firewall) POST() error {\n\n\t_, err := self.execute(http.MethodPost, fmt.Sprintf(\"/ns/%s/resources/securityGroup\", self.namespace), self, &self)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\nsrc/core/model/tumblebug/ns.go:24:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *NS) GET() (bool, error) {\n\n\tresp, err := app.ExecutHTTP(http.MethodGet, fmt.Sprintf(\"%s/ns/%s\", *config.Config.TumblebugUrl, self.Name), nil, &self)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tif resp.StatusCode() == http.StatusNotFound {\n\t\treturn false, nil\n\t}\n\n\treturn true, nil\n}\nsrc/core/model/tumblebug/spec.go:26:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Spec) GET() (bool, error) {\n\n\treturn self.execute(http.MethodGet, fmt.Sprintf(\"/ns/%s/resources/spec/%s\", self.namespace, self.Name), fmt.Sprintf(`{\"connectionName\" : \"%s\"}`, self.Config), &self)\n\n}\nsrc/core/model/tumblebug/sshkey.go:33:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *SSHKey) POST() error {\n\t// validation\n\tvalid := validation.Validation{}\n\tvalid.Required(self.Username, \"username\")\n\tif err := self.validate(valid); err != nil {\n\t\treturn err\n\t}\n\n\t_, err := self.execute(http.MethodPost, fmt.Sprintf(\"/ns/%s/resources/sshKey\", self.namespace), self, &self)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n\n}\nsrc/core/model/tumblebug/mcis.go:25:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *MCIS) GET() (bool, error) {\n\n\treturn self.execute(http.MethodGet, fmt.Sprintf(\"/ns/%s/mcis/%s\", self.namespace, self.Name), nil, &self)\n\n\t// if err = self.hasResponseMessage(resp); err != nil {\n\t// \t// 이부분은 향후 tumblebug 에서 수정해야 할듯\n\t// \tif strings.HasPrefix(err.Error(), \"Cannot find\") {\n\t// \t\treturn false, nil\n\t// \t} else {\n\t// \t\treturn false, err\n\t// \t}\n\t// }\n}\nsrc/core/model/tumblebug/vpc.go:47:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VPC) POST() error {\n\n\t_, err := self.execute(http.MethodPost, fmt.Sprintf(\"/ns/%s/resources/vNet\", self.namespace), self, &self)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n\n}\nsrc/core/model/tumblebug/spec.go:32:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Spec) POST() error {\n\n\t// validation\n\tvalid := validation.Validation{}\n\tvalid.Required(self.CspSpecName, \"cspSpecName\")\n\tif err := self.validate(valid); err != nil {\n\t\treturn err\n\t}\n\n\t_, err := self.execute(http.MethodPost, fmt.Sprintf(\"/ns/%s/resources/spec\", self.namespace), self, &self)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n\n}\nsrc/core/model/tumblebug/vpc.go:58:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VPC) DELETE() error {\n\n\texist, err := self.GET()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif exist {\n\t\t_, err := self.execute(http.MethodDelete, fmt.Sprintf(\"/ns/%s/resources/vNet/%s\", self.namespace, self.Name), fmt.Sprintf(`{\"connectionName\" : \"%s\"}`, self.Config), model.Status{})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tlogger.Infof(\"delete vpc skip.. (name=%s, cause=not found)\", self.Name)\n\t}\n\n\treturn nil\n}\nsrc/core/model/tumblebug/mcis.go:39:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *MCIS) POST() error {\n\n\t_, err := self.execute(http.MethodPost, fmt.Sprintf(\"/ns/%s/mcis\", self.namespace), self, &self)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\nsrc/core/model/tumblebug/mcis.go:49:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *MCIS) DELETE() error {\n\n\texist, err := self.GET()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif exist {\n\t\t_, err := self.execute(http.MethodDelete, fmt.Sprintf(\"/ns/%s/mcis/%s\", self.namespace, self.Name), nil, model.Status{})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tlogger.Infof(\"delete MCIS skip (name=%s, cause=not found)\", self.Name)\n\t}\n\n\treturn nil\n}\nsrc/core/model/tumblebug/mcis.go:67:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *MCIS) TERMINATE() error {\n\t_, err := self.execute(http.MethodGet, fmt.Sprintf(\"/ns/%s/mcis/%s?action=terminate\", self.namespace, self.Name), nil, model.Status{})\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nsrc/core/model/tumblebug/mcis.go:75:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *MCIS) REFINE() error {\n\t_, err := self.execute(http.MethodGet, fmt.Sprintf(\"/ns/%s/mcis/%s?action=refine\", self.namespace, self.Name), nil, model.Status{})\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nsrc/core/model/tumblebug/image.go:34:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Image) GET() (bool, error) {\n\n\treturn self.execute(http.MethodGet, fmt.Sprintf(\"/ns/%s/resources/image/%s\", self.namespace, self.Name), fmt.Sprintf(`{\"connectionName\" : \"%s\"}`, self.Config), &self)\n}\nsrc/core/model/tumblebug/image.go:39:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Image) POST() error {\n\n\t_, err := self.execute(http.MethodPost, fmt.Sprintf(\"/ns/%s/resources/image?action=registerWithInfo\", self.namespace), self, &self)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nsrc/core/model/tumblebug/base.go:85:11: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn errors.New(fmt.Sprintf(\"[%s]%s\", err.Key, err.Error()))\n\t\t\t       ^\nsrc/core/model/tumblebug/tvm.go:23:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *TVM) GET() (bool, error) {\n\n\treturn self.execute(http.MethodGet, fmt.Sprintf(\"/ns/%s/mcis/%s/vm/%s\", self.namespace, self.Name, self.VM.Name), nil, &self.VM)\n\n}\nsrc/core/model/tumblebug/base.go:96:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"%s\", d[\"message\"]))\n\t\t       ^\nsrc/core/model/tumblebug/base.go:28:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Model) execute(method string, url string, body interface{}, result interface{}) (bool, error) {\n\n\t// validation\n\tif err := self.validate(validation.Validation{}); err != nil {\n\t\treturn false, err\n\t}\n\n\tresp, err := app.ExecutHTTP(method, *config.Config.TumblebugUrl+url, body, result)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\t// response check\n\tif resp.StatusCode() > 300 && resp.StatusCode() != http.StatusNotFound {\n\t\tlogger.Warnf(\"Tumblebug : statusCode=%d, url=%s, body=%s\", resp.StatusCode(), resp.Request.URL, resp)\n\t\tstatus := model.Status{}\n\t\tjson.Unmarshal(resp.Body(), &status)\n\t\t// message > message 로 리턴되는 경우가 있어서 한번더 unmarshal 작업\n\t\tif json.Valid([]byte(status.Message)) {\n\t\t\tjson.Unmarshal([]byte(status.Message), &status)\n\t\t}\n\t\treturn false, errors.New(status.Message)\n\t}\n\n\tif method == http.MethodGet && resp.StatusCode() == http.StatusNotFound {\n\t\tlogger.Infof(\"Not found data (status=404, method=%s, url=%s)\", method, url)\n\t\treturn false, nil\n\t}\n\n\treturn true, nil\n\n}\nsrc/core/model/tumblebug/tvm.go:29:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *TVM) POST() error {\n\n\t_, err := self.execute(http.MethodPost, fmt.Sprintf(\"/ns/%s/mcis/%s/vm\", self.namespace, self.Name), self.VM, &self.VM)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n\n}\nsrc/core/model/tumblebug/tvm.go:40:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *TVM) DELETE() error {\n\n\texist, err := self.GET()\n\tif err != nil {\n\t\treturn err\n\t}\n\tif exist {\n\t\t_, err := self.execute(http.MethodDelete, fmt.Sprintf(\"/ns/%s/mcis/%s/vm/%s\", self.namespace, self.Name, self.VM.Name), nil, model.Status{})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tlogger.Infof(\"delete VM skip (name=%s, cause=not found)\", self.VM.Name)\n\t}\n\n\treturn nil\n}\nsrc/core/model/tumblebug/base.go:80:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Model) validate(valid validation.Validation) error {\n\tvalid.Required(self.namespace, \"namespace\")\n\tvalid.Required(self.Name, \"name\")\n\tif valid.HasErrors() {\n\t\tfor _, err := range valid.Errors {\n\t\t\treturn errors.New(fmt.Sprintf(\"[%s]%s\", err.Key, err.Error()))\n\t\t}\n\t}\n\treturn nil\n}\nsrc/core/model/tumblebug/base.go:92:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Model) hasResponseMessage(resp *resty.Response) error {\n\tvar d map[string]interface{}\n\tjson.Unmarshal(resp.Body(), &d)\n\tif d[\"message\"] != nil {\n\t\treturn errors.New(fmt.Sprintf(\"%s\", d[\"message\"]))\n\t}\n\treturn nil\n}\nsrc/grpc-api/common/cbconnection.go:40:31: var-declaration: should drop = nil from declaration of var tracer; it is the zero value (revive)\n\t\ttracer opentracing.Tracer = nil\n\t\t                            ^\nsrc/grpc-api/common/cbconnection.go:41:31: var-declaration: should drop = nil from declaration of var closer; it is the zero value (revive)\n\t\tcloser io.Closer          = nil\n\t\t                            ^\nsrc/grpc-api/common/cbserver.go:49:48: var-declaration: should drop = nil from declaration of var tracer; it is the zero value (revive)\n\t\ttracer      opentracing.Tracer             = nil\n\t\t                                             ^\nsrc/grpc-api/common/cbserver.go:50:48: var-declaration: should drop = nil from declaration of var closer; it is the zero value (revive)\n\t\tcloser      io.Closer                      = nil\n\t\t                                             ^\nsrc/grpc-api/common/cbserver.go:51:48: var-declaration: should drop = nil from declaration of var reg; it is the zero value (revive)\n\t\treg         *prometheus.Registry           = nil\n\t\t                                             ^\nsrc/grpc-api/common/cbserver.go:52:48: var-declaration: should drop = nil from declaration of var grpcMetrics; it is the zero value (revive)\n\t\tgrpcMetrics *grpc_prometheus.ServerMetrics = nil\n\t\t                                             ^\nsrc/grpc-api/interceptors/authjwt/auth.go:40:17: var-declaration: should omit type string from declaration of var tokenInfo; it will be inferred from the right-hand side (revive)\n\t\tvar tokenInfo string = \"{\"\n\t\t              ^\nsrc/rest-api/server.go:12:2: blank-imports: a blank import should be only in a main or test package, or have a comment justifying it (revive)\n\t_ \"github.com/cloud-barista/poc-cicd-ladybug/src/docs\"\n\t^\nsrc/core/model/cluster.go:54:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Cluster) Insert() error {\n\tself.Status = STATUS_CREATED\n\treturn self.putStore()\n}\nsrc/core/model/cluster.go:59:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Cluster) Update() error {\n\tself.Status = STATUS_PROVISIONING\n\treturn self.putStore()\n}\nsrc/core/model/cluster.go:64:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Cluster) Complete() error {\n\tself.Status = STATUS_COMPLETED\n\treturn self.putStore()\n}\nsrc/core/model/node.go:62:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Node) Select() error {\n\tkey := lang.GetStoreNodeKey(self.namespace, self.clusterName, self.Name)\n\tkeyValue, err := common.CBStore.Get(key)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif keyValue == nil {\n\t\treturn errors.New(fmt.Sprintf(\"%s not found\", key))\n\t}\n\n\tjson.Unmarshal([]byte(keyValue.Value), &self)\n\treturn nil\n}\nsrc/core/model/request.go:29:2: var-naming: struct field ServiceDnsDomain should be ServiceDNSDomain (revive)\n\tServiceDnsDomain string `json:\"serviceDnsDomain\"`\n\t^\nsrc/core/model/status.go:4:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSTATUS_UNKNOWN   = 0\n\t^\nsrc/core/model/types.go:4:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tKIND_STATUS       = \"Status\"\n\t^\nsrc/core/model/vm.go:47:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VM) ConnectionTest(sshInfo *ssh.SSHInfo) error {\n\tcmd := \"/bin/hostname\"\n\t_, err := ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\tlogger.Warnf(\"connection test error (server=%s, cause=%s)\", sshInfo.ServerPort, err)\n\t\treturn err\n\t}\n\treturn nil\n}\nsrc/core/model/node.go:76:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Node) Insert() error {\n\tkey := lang.GetStoreNodeKey(self.namespace, self.clusterName, self.Name)\n\tvalue, _ := json.Marshal(self)\n\terr := common.CBStore.Put(key, string(value))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\nsrc/core/model/cluster.go:69:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Cluster) Fail() error {\n\tself.Status = STATUS_FAILED\n\treturn self.putStore()\n}\nsrc/core/model/status.go:5:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSTATUS_SUCCESS   = 1\n\t^\nsrc/core/model/vm.go:57:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VM) CopyScripts(sshInfo *ssh.SSHInfo, networkCni string) error {\n\tsourcePath := fmt.Sprintf(\"%s/src/scripts\", *config.Config.AppRootPath)\n\tsourceFile := []string{config.BOOTSTRAP_FILE}\n\tif self.Role == config.CONTROL_PLANE && self.IsCPLeader {\n\t\tsourceFile = append(sourceFile, config.INIT_FILE)\n\t\tsourceFile = append(sourceFile, config.HA_PROXY_FILE)\n\t}\n\tif networkCni == config.NETWORKCNI_CANAL {\n\t\tsourceFile = append(sourceFile, config.LADYBUG_BOOTSTRAP_CANAL_FILE)\n\t} else {\n\t\tsourceFile = append(sourceFile, config.LADYBUG_BOOTSTRAP_KILO_FILE)\n\t}\n\tsourceFile = append(sourceFile, config.SYSTEMD_SERVICE_FILE)\n\n\tlogger.Infof(\"start script file copy (vm=%s, src=%s, dest=%s)\\n\", self.Name, sourcePath, remoteTargetPath)\n\tfor _, f := range sourceFile {\n\t\tsrc := fmt.Sprintf(\"%s/%s\", sourcePath, f)\n\t\tdest := fmt.Sprintf(\"%s/%s\", remoteTargetPath, f)\n\t\tif err := ssh.SSHCopy(*sshInfo, src, dest); err != nil {\n\t\t\treturn errors.New(fmt.Sprintf(\"copy scripts error (server=%s, cause=%s)\", sshInfo.ServerPort, err))\n\t\t}\n\t}\n\tlogger.Infof(\"end script file copy (vm=%s, server=%s)\\n\", self.Name, sshInfo.ServerPort)\n\treturn nil\n}\nsrc/core/model/types.go:5:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tKIND_CLUSTER      = \"Cluster\"\n\t^\nsrc/core/model/cluster.go:74:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Cluster) putStore() error {\n\tkey := lang.GetStoreClusterKey(self.Namespace, self.Name)\n\tvalue, _ := json.Marshal(self)\n\terr := common.CBStore.Put(key, string(value))\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\nsrc/core/model/node.go:87:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Node) Delete() error {\n\tkey := lang.GetStoreNodeKey(self.namespace, self.clusterName, self.Name)\n\terr := common.CBStore.Delete(key)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\nsrc/core/model/vm.go:83:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VM) SetSystemd(sshInfo *ssh.SSHInfo, networkCni string) error {\n\tvar bsFile string\n\tif networkCni == config.NETWORKCNI_CANAL {\n\t\tbsFile = config.LADYBUG_BOOTSTRAP_CANAL_FILE\n\t} else {\n\t\tbsFile = config.LADYBUG_BOOTSTRAP_KILO_FILE\n\t}\n\n\tcmd := fmt.Sprintf(\"cd %s;./%s\", remoteTargetPath, bsFile)\n\t_, err := ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"create ladybug-bootstrap error (name=%s)\", self.Name))\n\t}\n\n\tcmd = fmt.Sprintf(\"cd %s;./%s\", remoteTargetPath, config.SYSTEMD_SERVICE_FILE)\n\t_, err = ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\treturn errors.New(fmt.Sprintf(\"set systemd service error (name=%s)\", self.Name))\n\t}\n\treturn nil\n}\nsrc/core/model/status.go:6:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSTATUS_NOT_EXIST = 404\n\t^\nsrc/core/model/cluster.go:84:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Cluster) Select() error {\n\tkey := lang.GetStoreClusterKey(self.Namespace, self.Name)\n\tkeyValue, err := common.CBStore.Get(key)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif keyValue == nil {\n\t\treturn errors.New(fmt.Sprintf(\"%s not found\", key))\n\t}\n\tjson.Unmarshal([]byte(keyValue.Value), &self)\n\n\terr = getClusterNodes(self)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\nsrc/core/model/types.go:6:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tKIND_CLUSTER_LIST = \"ClusterList\"\n\t^\nsrc/core/model/vm.go:105:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VM) Bootstrap(sshInfo *ssh.SSHInfo) error {\n\tcmd := fmt.Sprintf(\"cd %s;./%s\", remoteTargetPath, config.BOOTSTRAP_FILE)\n\n\tresult, err := ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\treturn errors.New(\"k8s bootstrap error\")\n\t}\n\tif strings.Contains(result, \"kubectl set on hold\") {\n\t\treturn nil\n\t} else {\n\t\treturn errors.New(fmt.Sprintf(\"k8s bootstrap failed (name=%s)\", self.Name))\n\t}\n}\nsrc/core/model/node.go:97:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *NodeList) SelectList() error {\n\tkeyValues, err := common.CBStore.GetList(lang.GetStoreNodeKey(self.namespace, self.clusterName, \"\"), true)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor _, keyValue := range keyValues {\n\t\tnode := &Node{}\n\t\tjson.Unmarshal([]byte(keyValue.Value), &node)\n\t\tself.Items = append(self.Items, *node)\n\t}\n\n\treturn nil\n}\nsrc/core/model/cluster.go:103:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Cluster) Delete() error {\n\t// delete node\n\tkeyValues, err := common.CBStore.GetList(lang.GetStoreNodeKey(self.Namespace, self.Name, \"\"), true)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfor _, keyValue := range keyValues {\n\t\terr = common.CBStore.Delete(keyValue.Key)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// delete cluster\n\tkey := lang.GetStoreClusterKey(self.Namespace, self.Name)\n\terr = common.CBStore.Delete(key)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\nsrc/core/model/vm.go:119:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VM) InstallHAProxy(sshInfo *ssh.SSHInfo, IPs []string) error {\n\tvar servers string\n\tfor i, ip := range IPs {\n\t\tservers += fmt.Sprintf(\"  server  api%d  %s:6443  check\", i+1, ip)\n\t\tif i < len(IPs)-1 {\n\t\t\tservers += \"\\\\n\"\n\t\t}\n\t}\n\tcmd := fmt.Sprintf(\"sudo sed 's/^{{SERVERS}}/%s/g' %s/%s\", servers, remoteTargetPath, config.HA_PROXY_FILE)\n\tresult, err := ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\tlogger.Warnf(\"get haproxy command error (name=%s, cause=%v)\", self.Name, err)\n\t\treturn err\n\t}\n\t_, err = ssh.SSHRun(*sshInfo, result)\n\tif err != nil {\n\t\tlogger.Warnf(\"install haproxy error (name=%s, cause=%v)\", self.Name, err)\n\t\treturn err\n\t}\n\treturn nil\n}\nsrc/core/model/types.go:7:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tKIND_NODE         = \"Node\"\n\t^\nsrc/core/model/cluster.go:126:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *ClusterList) SelectList() error {\n\tkeyValues, err := common.CBStore.GetList(lang.GetStoreClusterKey(self.namespace, \"\"), true)\n\tif err != nil {\n\t\treturn err\n\t}\n\tself.Items = []Cluster{}\n\tfor _, keyValue := range keyValues {\n\t\tif !strings.Contains(keyValue.Key, \"/nodes\") {\n\t\t\tcluster := &Cluster{}\n\t\t\tjson.Unmarshal([]byte(keyValue.Value), &cluster)\n\n\t\t\terr = getClusterNodes(cluster)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tself.Items = append(self.Items, *cluster)\n\t\t}\n\t}\n\n\treturn nil\n}\nsrc/core/model/types.go:8:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tKIND_NODE_LIST    = \"NodeList\"\n\t^\nsrc/core/model/vm.go:141:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VM) ControlPlaneInit(sshInfo *ssh.SSHInfo, reqKubernetes Kubernetes) ([]string, string, error) {\n\tvar joinCmd []string\n\n\tcmd := fmt.Sprintf(\"cd %s;./%s %s %s %s\", remoteTargetPath, config.INIT_FILE, reqKubernetes.PodCidr, reqKubernetes.ServiceCidr, reqKubernetes.ServiceDnsDomain)\n\tcpInitResult, err := ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\tlogger.Warnf(\"control plane init error (name=%s, cause=%v)\", self.Name, err)\n\t\treturn nil, \"\", errors.New(\"k8s control plane node init error\")\n\t}\n\tif strings.Contains(cpInitResult, \"Your Kubernetes control-plane has initialized successfully\") {\n\t\tjoinCmd = getJoinCmd(cpInitResult)\n\t} else {\n\t\treturn nil, \"\", errors.New(fmt.Sprintf(\"control palne init failed (name=%s)\", self.Name))\n\t}\n\n\tcmd = \"sudo cat /etc/kubernetes/admin.conf\"\n\tclusterConfig, err := ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\tlogger.Errorf(\"Error while running cmd %s (vm=%s, cause=%v)\", cmd, self.Name, err)\n\t}\n\n\treturn joinCmd, clusterConfig, nil\n}\nsrc/core/model/vm.go:165:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VM) InstallNetworkCNI(sshInfo *ssh.SSHInfo, networkCni string) error {\n\tvar cmd string\n\tif networkCni == config.NETWORKCNI_CANAL {\n\t\tcmd = \"sudo kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml --kubeconfig=/etc/kubernetes/admin.conf\"\n\t} else {\n\t\tcmd = `sudo kubectl apply -f https://raw.githubusercontent.com/squat/kilo/main/manifests/crds.yaml --kubeconfig=/etc/kubernetes/admin.conf;\n\t\tsudo kubectl apply -f https://raw.githubusercontent.com/squat/kilo/master/manifests/kilo-kubeadm-flannel.yaml --kubeconfig=/etc/kubernetes/admin.conf;\n\t\tsudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml --kubeconfig=/etc/kubernetes/admin.conf;`\n\t}\n\n\t_, err := ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\tlogger.Warnf(\"networkCNI install failed (name=%s, cause=%v)\", self.Name, err)\n\t\treturn errors.New(\"NetworkCNI Install error\")\n\t}\n\treturn nil\n}\nsrc/core/model/vm.go:183:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VM) ControlPlaneJoin(sshInfo *ssh.SSHInfo, CPJoinCmd *string) error {\n\tif *CPJoinCmd == \"\" {\n\t\treturn errors.New(\"control-plane node join command empty\")\n\t}\n\tcmd := fmt.Sprintf(\"sudo %s\", *CPJoinCmd)\n\tresult, err := ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\tlogger.Warnf(\"control-plane join error (name=%s, cause=%v)\", self.Name, err)\n\t\treturn errors.New(\"control-plane node join error\")\n\t}\n\n\tif strings.Contains(result, \"This node has joined the cluster\") {\n\t\t_, err = ssh.SSHRun(*sshInfo, \"sudo systemctl restart ladybug-bootstrap\")\n\t\tif err != nil {\n\t\t\tlogger.Warnf(\"ladybug-bootstrap restart error (name=%s, cause=%v)\", self.Name, err)\n\t\t}\n\t\treturn nil\n\t} else {\n\t\tlogger.Warnf(\"control-plane join failed (name=%s)\", self.Name)\n\t\treturn errors.New(fmt.Sprintf(\"control-plane join failed (name=%s)\", self.Name))\n\t}\n}\nsrc/core/model/vm.go:206:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *VM) WorkerJoin(sshInfo *ssh.SSHInfo, workerJoinCmd *string) error {\n\tif *workerJoinCmd == \"\" {\n\t\treturn errors.New(\"worker node join command empty\")\n\t}\n\tcmd := fmt.Sprintf(\"sudo %s\", *workerJoinCmd)\n\tresult, err := ssh.SSHRun(*sshInfo, cmd)\n\tif err != nil {\n\t\tlogger.Warnf(\"worker join error (name=%s, cause=%v)\", self.Name, err)\n\t\treturn errors.New(fmt.Sprintf(\"worker node join error (name=%s)\", self.Name))\n\t}\n\tif strings.Contains(result, \"This node has joined the cluster\") {\n\t\t_, err = ssh.SSHRun(*sshInfo, \"sudo systemctl restart ladybug-bootstrap\")\n\t\tif err != nil {\n\t\t\tlogger.Warnf(\"ladybug-bootstrap restart error (name=%s, cause=%v)\", self.Name, err)\n\t\t}\n\t\treturn nil\n\t} else {\n\t\tlogger.Warnf(\"worker join failed (name=%s)\", self.Name)\n\t\treturn errors.New(fmt.Sprintf(\"worker node join failed (name=%s)\", self.Name))\n\t}\n}\nsrc/core/model/node.go:19:2: var-naming: struct field UId should be UID (revive)\n\tUId         string     `json:\"uid\"`\n\t^\nsrc/core/model/node.go:69:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t       ^\nsrc/core/model/vm.go:76:11: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn errors.New(fmt.Sprintf(\"copy scripts error (server=%s, cause=%s)\", sshInfo.ServerPort, err))\n\t\t\t       ^\nsrc/core/model/vm.go:94:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"create ladybug-bootstrap error (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:100:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"set systemd service error (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:115:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"k8s bootstrap failed (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:153:19: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn nil, \"\", errors.New(fmt.Sprintf(\"control palne init failed (name=%s)\", self.Name))\n\t\t                ^\nsrc/core/model/vm.go:202:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"control-plane join failed (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:214:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"worker node join error (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:224:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"worker node join failed (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:114:9: indent-error-flow: if block ends with a return statement, so drop this else and outdent its block (revive)\n\t} else {\n\t\treturn errors.New(fmt.Sprintf(\"k8s bootstrap failed (name=%s)\", self.Name))\n\t}\nsrc/core/model/vm.go:200:9: indent-error-flow: if block ends with a return statement, so drop this else and outdent its block (revive)\n\t} else {\n\t\tlogger.Warnf(\"control-plane join failed (name=%s)\", self.Name)\n\t\treturn errors.New(fmt.Sprintf(\"control-plane join failed (name=%s)\", self.Name))\n\t}\nsrc/core/model/vm.go:222:9: indent-error-flow: if block ends with a return statement, so drop this else and outdent its block (revive)\n\t} else {\n\t\tlogger.Warnf(\"worker join failed (name=%s)\", self.Name)\n\t\treturn errors.New(fmt.Sprintf(\"worker node join failed (name=%s)\", self.Name))\n\t}\nsrc/core/model/cluster.go:14:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSTATUS_CREATED      = \"created\"\n\t^\nsrc/core/model/cluster.go:15:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSTATUS_PROVISIONING = \"provisioning\"\n\t^\nsrc/core/model/cluster.go:16:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSTATUS_COMPLETED    = \"completed\"\n\t^\nsrc/core/model/cluster.go:17:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSTATUS_FAILED       = \"failed\"\n\t^\nsrc/core/model/cluster.go:23:2: var-naming: struct field UId should be UID (revive)\n\tUId           string `json:\"uid\"`\n\t^\nsrc/core/model/cluster.go:91:10: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t       ^\nsrc/grpc-api/request/test/test_api.go:223:6: var-naming: don't use underscores in Go names; func CIM_Create_Info_Test should be CIMCreateInfoTest (revive)\nfunc CIM_Create_Info_Test() {\n     ^\nsrc/grpc-api/request/test/test_api.go:339:6: var-naming: func CreateClusterApiTest should be CreateClusterAPITest (revive)\nfunc CreateClusterApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:388:6: var-naming: func ListClusterApiTest should be ListClusterAPITest (revive)\nfunc ListClusterApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:416:6: var-naming: func GetClusterApiTest should be GetClusterAPITest (revive)\nfunc GetClusterApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:444:6: var-naming: func AddNodeApiTest should be AddNodeAPITest (revive)\nfunc AddNodeApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:482:6: var-naming: func ListNodeApiTest should be ListNodeAPITest (revive)\nfunc ListNodeApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:510:6: var-naming: func GetNodeApiTest should be GetNodeAPITest (revive)\nfunc GetNodeApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:542:6: var-naming: func RemoveNodeApiTest should be RemoveNodeAPITest (revive)\nfunc RemoveNodeApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:574:6: var-naming: func DeleteClusterApiTest should be DeleteClusterAPITest (revive)\nfunc DeleteClusterApiTest() {\n     ^\nsrc/core/service/cluster.go:54:19: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn cluster, errors.New(fmt.Sprintf(\"namespace does not exist (name=%s)\", namespace))\n\t\t                ^\nsrc/core/service/common.go:27:16: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn nil, errors.New(fmt.Sprintf(\"%s Connection connect error (connectionName=%s)\", role, nodeConfig.Connection))\n\t\t\t            ^\nsrc/core/service/common.go:30:16: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn nil, errors.New(fmt.Sprintf(\"%s Connection does not exist (connectionName=%s)\", role, nodeConfig.Connection))\n\t\t\t            ^\nsrc/core/service/common.go:40:16: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn nil, errors.New(fmt.Sprintf(\"%s get region error (connectionName=%s)\", role, nodeConfig.Connection))\n\t\t\t            ^\nsrc/core/service/mcir.go:51:39: var-naming: method CreateSshKey should be CreateSSHKey (revive)\nfunc (nodeConfigInfo *NodeConfigInfo) CreateSshKey(namespace string) (*tumblebug.SSHKey, error) {\n                                      ^\nsrc/core/service/mcir.go:72:2: var-naming: var imageId should be imageID (revive)\n\timageId, e := GetVmImageId(nodeConfigInfo.Csp, nodeConfigInfo.Connection)\n\t^\nsrc/core/service/common.go:43:16: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn nil, errors.New(fmt.Sprintf(\"%s region does not exist (connectionName=%s)\", role, nodeConfig.Connection))\n\t\t\t            ^\nsrc/core/service/node.go:295:15: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn nil, errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t            ^\nsrc/core/service/node.go:316:15: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn nil, errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t            ^\nsrc/core/service/node.go:347:14: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn \"\", errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t           ^\nsrc/core/service/csp.go:62:15: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn \"\", errors.New(fmt.Sprintf(\"request not found AMI on AWS (cause = not found connection config `%s`)\", configName))\n\t\t\t           ^\nsrc/core/service/csp.go:72:15: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn \"\", errors.New(fmt.Sprintf(\"request not found AMI on AWS (cause = not found region, connection='%s', region name='%s')\", configName, conn.RegionName))\n\t\t\t           ^\nsrc/core/service/csp.go:84:15: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn \"\", errors.New(fmt.Sprintf(\"request not found AMI on AWS (cause = region name is empty, connection='%s', region name='%s')\", configName, conn.RegionName))\n\t\t\t           ^\nsrc/core/service/csp.go:90:15: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn \"\", errors.New(fmt.Sprintf(\"request not found AMI on AWS image map (connection='%s', region='%s')\", configName, regionName))\n\t\t\t           ^\nsrc/core/service/csp.go:97:14: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\treturn \"\", errors.New(fmt.Sprintf(\"CSP '%s' is not supported (Not found \\\"vm-machine-image\\\")\", csp))\n\t\t           ^\nsrc/core/service/csp.go:43:21: unused-parameter: parameter 'csp' seems to be unused, consider removing or renaming it as _ (revive)\nfunc GetUserAccount(csp config.CSP) string {\n                    ^\nsrc/core/service/csp.go:14:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tGCP_IMAGE_ID   = \"https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20201014\"\n\t^\nsrc/core/service/csp.go:15:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tAZURE_IMAGE_ID = \"Canonical:UbuntuServer:18.04-LTS:latest\"\n\t^\nsrc/core/service/csp.go:48:6: var-naming: func GetVmImageId should be GetVMImageID (revive)\nfunc GetVmImageId(csp config.CSP, configName string) (string, error) {\n     ^\nsrc/core/service/csp.go:88:3: var-naming: var imageId should be imageID (revive)\n\t\timageId := imageMap[regionName]\n\t\t^\nsrc/grpc-api/request/mcarapi.go:64:2: var-naming: struct field ServiceDnsDomain should be ServiceDNSDomain (revive)\n\tServiceDnsDomain string `yaml:\"serviceDnsDomain\" json:\"serviceDnsDomain\"`\n\t^\nintegration-test/rest-scenario/setup.go:29:2: var-naming: struct field HttpMethod should be HTTPMethod (revive)\n\tHttpMethod           string\n\t^\nintegration-test/rest-scenario/setup.go:41:24: var-declaration: should drop = nil from declaration of var holdStdout; it is the zero value (revive)\n\tholdStdout *os.File = nil\n\t                      ^\nintegration-test/rest-scenario/echo_call.go:35:20: error-strings: error strings should not be capitalized or end with punctuation or a newline (revive)\n\t\terr = errors.New(\"The number of params is not adapted.\")\n\t\t                 ^\nintegration-test/rest-scenario/echo_call.go:50:17: var-declaration: should drop = \"\" from declaration of var body; it is the zero value (revive)\n\t\tbody string = \"\"\n\t\t              ^\nintegration-test/rest-scenario/echo_call.go:51:17: var-declaration: should drop = nil from declaration of var err; it is the zero value (revive)\n\t\terr  error  = nil\n\t\t              ^\nintegration-test/rest-scenario/echo_call.go:56:27: var-declaration: should drop = nil from declaration of var req; it is the zero value (revive)\n\t\tvar req *http.Request = nil\n\t\t                        ^\nsrc/core/model/spider/region.go:32:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Region) GET() (bool, error) {\n\n\turl := fmt.Sprintf(\"%s/region/%s\", *config.Config.SpiderUrl, self.RegionName)\n\tresp, err := app.ExecutHTTP(http.MethodGet, url, nil, &self)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tif resp.StatusCode() == http.StatusNotFound {\n\t\tlogger.Warnf(\"Not found data (status=404, method=%s, url=%s)\", http.MethodGet, url)\n\t\treturn false, nil\n\t}\n\n\treturn true, nil\n\n}\nsrc/core/model/spider/connection.go:30:1: receiver-naming: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (revive)\nfunc (self *Connection) GET() (bool, error) {\n\n\turl := fmt.Sprintf(\"%s/connectionconfig/%s\", *config.Config.SpiderUrl, self.ConfigName)\n\tresp, err := app.ExecutHTTP(http.MethodGet, url, nil, &self)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tif err = self.response(resp, err); err != nil {\n\t\treturn false, err\n\t}\n\tif resp.StatusCode() == http.StatusNotFound {\n\t\tlogger.Infof(\"Not found data (status=404, method=%s, url=%s)\", http.MethodGet, url)\n\t\treturn false, nil\n\t}\n\n\treturn true, nil\n\n}\nsrc/utils/config/config.go:14:2: var-naming: struct field SpiderUrl should be SpiderURL (revive)\n\tSpiderUrl    *string\n\t^\nsrc/utils/config/config.go:15:2: var-naming: struct field TumblebugUrl should be TumblebugURL (revive)\n\tTumblebugUrl *string\n\t^\nsrc/utils/config/const.go:6:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tCONTROL_PLANE = \"control-plane\"\n\t^\nsrc/utils/config/const.go:9:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tBOOTSTRAP_FILE               = \"bootstrap.sh\"\n\t^\nsrc/utils/config/const.go:10:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tINIT_FILE                    = \"k8s-init.sh\"\n\t^\nsrc/utils/config/const.go:11:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tLADYBUG_BOOTSTRAP_CANAL_FILE = \"ladybug-bootstrap-canal.sh\"\n\t^\nsrc/utils/config/const.go:12:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tLADYBUG_BOOTSTRAP_KILO_FILE  = \"ladybug-bootstrap-kilo.sh\"\n\t^\nsrc/utils/config/const.go:13:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSYSTEMD_SERVICE_FILE         = \"systemd-service.sh\"\n\t^\nsrc/utils/config/const.go:14:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tHA_PROXY_FILE                = \"haproxy.sh\"\n\t^\nsrc/utils/config/const.go:16:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tCSP_AWS   CSP = \"aws\"\n\t^\nsrc/utils/config/const.go:17:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tCSP_GCP   CSP = \"gcp\"\n\t^\nsrc/utils/config/const.go:18:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tCSP_AZURE CSP = \"azure\"\n\t^\nsrc/utils/config/const.go:20:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tNETWORKCNI_KILO  = \"kilo\"\n\t^\nsrc/utils/config/const.go:21:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tNETWORKCNI_CANAL = \"canal\"\n\t^\nsrc/utils/config/const.go:23:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tPOD_CIDR       = \"10.244.0.0/16\"\n\t^\nsrc/utils/config/const.go:24:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSERVICE_CIDR   = \"10.96.0.0/12\"\n\t^\nsrc/utils/config/const.go:25:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)\n\tSERVICE_DOMAIN = \"cluster.local\"\n\t^\nsrc/grpc-api/server/mcar/cluster.go:21:37: unused-parameter: parameter 'ctx' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (s *MCARService) CreateCluster(ctx context.Context, req *pb.ClusterCreateRequest) (*pb.ClusterInfoResponse, error) {\n                                    ^\nsrc/grpc-api/server/mcar/cluster.go:57:35: unused-parameter: parameter 'ctx' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (s *MCARService) ListCluster(ctx context.Context, req *pb.ClusterAllQryRequest) (*pb.ListClusterInfoResponse, error) {\n                                  ^\nsrc/grpc-api/server/mcar/cluster.go:78:34: unused-parameter: parameter 'ctx' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (s *MCARService) GetCluster(ctx context.Context, req *pb.ClusterQryRequest) (*pb.ClusterInfoResponse, error) {\n                                 ^\nsrc/grpc-api/server/mcar/healthy.go:17:31: unused-parameter: parameter 'ctx' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (s *MCARService) Healthy(ctx context.Context, req *pb.Empty) (*pb.MessageResponse, error) {\n                              ^\nsrc/grpc-api/server/mcar/mcar.go:32:11: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn errors.New(fmt.Sprintf(\"[%s]%s\", err.Key, err.Error()))\n\t\t\t       ^\nsrc/grpc-api/server/mcar/node.go:21:31: unused-parameter: parameter 'ctx' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (s *MCARService) AddNode(ctx context.Context, req *pb.NodeCreateRequest) (*pb.ListNodeInfoResponse, error) {\n                              ^\nsrc/grpc-api/server/mcar/cluster.go:104:37: unused-parameter: parameter 'ctx' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (s *MCARService) DeleteCluster(ctx context.Context, req *pb.ClusterQryRequest) (*pb.StatusResponse, error) {\n                                    ^\nsrc/grpc-api/server/mcar/node.go:58:32: unused-parameter: parameter 'ctx' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (s *MCARService) ListNode(ctx context.Context, req *pb.NodeAllQryRequest) (*pb.ListNodeInfoResponse, error) {\n                               ^\nsrc/grpc-api/server/mcar/node.go:83:31: unused-parameter: parameter 'ctx' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (s *MCARService) GetNode(ctx context.Context, req *pb.NodeQryRequest) (*pb.NodeInfoResponse, error) {\n                              ^\nsrc/grpc-api/server/mcar/node.go:109:34: unused-parameter: parameter 'ctx' seems to be unused, consider removing or renaming it as _ (revive)\nfunc (s *MCARService) RemoveNode(ctx context.Context, req *pb.NodeQryRequest) (*pb.StatusResponse, error) {\n                                 ^\nsrc/utils/app/ack.go:64:9: indent-error-flow: if block ends with a return statement, so drop this else and outdent its block (revive)\n\t} else {\n\t\terr := lang.CheckName(req.Name)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\nsrc/utils/app/ack.go:35:11: errorf: should replace errors.New(fmt.Sprintf(...)) with fmt.Errorf(...) (revive)\n\t\t\treturn errors.New(fmt.Sprintf(\"[%s]%s\", err.Key, err.Error()))\n\t\t\t       ^\n"},"gofmt":{"run":1,"cnt":17,"details":"src/grpc-api/interceptors/authjwt/client_interceptors.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage authjwt\n\nimport (\n\t\"context\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/metadata\"\n\t\"google.golang.org/grpc/status\"\n)\n\n// ===== [ Constants and Variables ] =====\nvar (\n\tjwtToken = \"\"\n)\n\n// ===== [ Types ] =====\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// UnaryClientInterceptor - JWT 토큰을 전달하는 Unary 클라이언트 인터셉터\nfunc UnaryClientInterceptor(token string) grpc.UnaryClientInterceptor {\n\tjwtToken = token\n\treturn func(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n\n\t\tif jwtToken == \"\" {\n\t\t\treturn status.Errorf(codes.Unauthenticated, \"jwt token is not supplied\")\n\t\t}\n\n\t\tctx = metadata.AppendToOutgoingContext(ctx, \"authorization\", jwtToken)\n\n\t\treturn invoker(ctx, method, req, reply, cc, opts...)\n\t}\n}\n\n// StreamClientInterceptor - JWT 토큰을 전달하는 Stream 클라이언트 인터셉터\nfunc StreamClientInterceptor(token string) grpc.StreamClientInterceptor {\n\tjwtToken = token\n\treturn func(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (grpc.ClientStream, error) {\n\n\t\tif jwtToken == \"\" {\n\t\t\treturn nil, status.Errorf(codes.Unauthenticated, \"jwt token is not supplied\")\n\t\t}\n\n\t\tctx = metadata.AppendToOutgoingContext(ctx, \"authorization\", jwtToken)\n\n\t\treturn streamer(ctx, desc, cc, method, opts...)\n\t}\n}\nsrc/grpc-api/interceptors/authjwt/server_interceptors.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage authjwt\n\nimport (\n\t\"context\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\n// ===== [ Constants and Variables ] =====\nvar (\n\tjwtKey = \"\"\n)\n\n// ===== [ Types ] =====\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// UnaryServerInterceptor - authentication 을 처리하는 Unary 서버 인터셉터\nfunc UnaryServerInterceptor(key string) grpc.UnaryServerInterceptor {\n\tjwtKey = key\n\treturn func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\n\t\tif jwtKey == \"\" {\n\t\t\treturn nil, status.Errorf(codes.Unauthenticated, \"jwt key is not supplied\")\n\t\t}\n\n\t\t_, err := validateToken(ctx)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn handler(ctx, req)\n\t}\n}\n\n// StreamServerInterceptor - authentication 을 처리하는 Stream 서버 인터셉터\nfunc StreamServerInterceptor(key string) grpc.StreamServerInterceptor {\n\tjwtKey = key\n\treturn func(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\n\t\tif jwtKey == \"\" {\n\t\t\treturn status.Errorf(codes.Unauthenticated, \"jwt key is not supplied\")\n\t\t}\n\n\t\t_, err := validateToken(stream.Context())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn handler(srv, stream)\n\t}\n}\nsrc/grpc-api/request/test/test_api.go:8: File is not `gofmt`-ed with `-s` (gofmt)\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger\"\n\tlb_api \"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request\"\nsrc/core/service/cluster.go:9: File is not `gofmt`-ed with `-s` (gofmt)\n\nsrc/grpc-api/config/config.go:1: File is not `gofmt`-ed with `-s` (gofmt)\n// Package config - Configuration for Cloud-Barista's GRPC and provides the required process\npackage config\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n)\n\n// ===== [ Constants and Variables ] =====\n\nconst (\n\t// ConfigVersion - 설정 구조에 대한 버전\n\tConfigVersion = 1\n)\n\n// ===== [ Types ] =====\n\n// GrpcConfig - CB-GRPC 서비스 설정 구조\ntype GrpcConfig struct {\n\tVersion int             `mapstructure:\"version\"`\n\tGSL     GrpcServiceList `mapstructure:\"grpc\"`\n}\n\n// GrpcServiceList - CB-GRPC 서비스 목록\ntype GrpcServiceList struct {\n\tLadybugSrv *GrpcServerConfig `mapstructure:\"ladybugsrv\"`\n\tLadybugCli *GrpcClientConfig `mapstructure:\"ladybugcli\"`\n}\n\n// GrpcServerConfig - CB-GRPC 서버 설정 구조\ntype GrpcServerConfig struct {\n\tAddr         string              `mapstructure:\"addr\"`\n\tReflection   string              `mapstructure:\"reflection\"`\n\tTLS          *TLSConfig          `mapstructure:\"tls\"`\n\tInterceptors *InterceptorsConfig `mapstructure:\"interceptors\"`\n}\n\n// GrpcClientConfig - CB-GRPC 클라이언트 설정 구조\ntype GrpcClientConfig struct {\n\tServerAddr   string              `mapstructure:\"server_addr\"`\n\tTimeout      time.Duration       `mapstructure:\"timeout\"`\n\tTLS          *TLSConfig          `mapstructure:\"tls\"`\n\tInterceptors *InterceptorsConfig `mapstructure:\"interceptors\"`\n}\n\n// TLSConfig - TLS 설정 구조\ntype TLSConfig struct {\n\tTLSCert string `mapstructure:\"tls_cert\"`\n\tTLSKey  string `mapstructure:\"tls_key\"`\n\tTLSCA   string `mapstructure:\"tls_ca\"`\n}\n\n// InterceptorsConfig - GRPC 인터셉터 설정 구조\ntype InterceptorsConfig struct {\n\tAuthJWT           *AuthJWTConfig           `mapstructure:\"auth_jwt\"`\n\tPrometheusMetrics *PrometheusMetricsConfig `mapstructure:\"prometheus_metrics\"`\n\tOpentracing       *OpentracingConfig       `mapstructure:\"opentracing\"`\n}\n\n// AuthJWTConfig - AuthJWT 설정 구조\ntype AuthJWTConfig struct {\n\tJWTKey   string `mapstructure:\"jwt_key\"`\n\tJWTToken string `mapstructure:\"jwt_token\"`\n}\n\n// PrometheusMetricsConfig - Prometheus Metrics 설정 구조\ntype PrometheusMetricsConfig struct {\n\tListenPort int `mapstructure:\"listen_port\"`\n}\n\n// OpentracingConfig - Opentracing 설정 구조\ntype OpentracingConfig struct {\n\tJaeger *JaegerClientConfig `mapstructure:\"jaeger\"`\n}\n\n// JaegerClientConfig - Jaeger Client 설정 구조\ntype JaegerClientConfig struct {\n\tEndpoint    string  `mapstructure:\"endpoint\"`\n\tServiceName string  `mapstructure:\"service_name\"`\n\tSampleRate  float64 `mapstructure:\"sample_rate\"`\n}\n\n// UnsupportedVersionError - 설정 초기화 과정에서 버전 검증을 통해 반환할 오류 구조\ntype UnsupportedVersionError struct {\n\tHave int\n\tWant int\n}\n\n// ===== [ Implementations ] =====\n\n// Init - 설정에 대한 검사 및 초기화\nfunc (gConf *GrpcConfig) Init() error {\n\t// 설정 파일 버전 검증\n\tif gConf.Version != ConfigVersion {\n\t\treturn &UnsupportedVersionError{\n\t\t\tHave: gConf.Version,\n\t\t\tWant: ConfigVersion,\n\t\t}\n\t}\n\t// 전역변수 초기화\n\tgConf.initGlobalParams()\n\n\treturn nil\n}\n\n// initGlobalParams - 전역 설정 초기화\nfunc (gConf *GrpcConfig) initGlobalParams() {\n\n\tif gConf.GSL.LadybugSrv != nil {\n\n\t\tif gConf.GSL.LadybugSrv.TLS != nil {\n\t\t\tif gConf.GSL.LadybugSrv.TLS.TLSCert != \"\" {\n\t\t\t\tgConf.GSL.LadybugSrv.TLS.TLSCert = ReplaceEnvPath(gConf.GSL.LadybugSrv.TLS.TLSCert)\n\t\t\t}\n\t\t\tif gConf.GSL.LadybugSrv.TLS.TLSKey != \"\" {\n\t\t\t\tgConf.GSL.LadybugSrv.TLS.TLSKey = ReplaceEnvPath(gConf.GSL.LadybugSrv.TLS.TLSKey)\n\t\t\t}\n\t\t}\n\n\t\tif gConf.GSL.LadybugSrv.Interceptors != nil {\n\t\t\tif gConf.GSL.LadybugSrv.Interceptors.Opentracing != nil {\n\t\t\t\tif gConf.GSL.LadybugSrv.Interceptors.Opentracing.Jaeger != nil {\n\n\t\t\t\t\tif gConf.GSL.LadybugSrv.Interceptors.Opentracing.Jaeger.ServiceName == \"\" {\n\t\t\t\t\t\tgConf.GSL.LadybugSrv.Interceptors.Opentracing.Jaeger.ServiceName = \"grpc ladybug server\"\n\t\t\t\t\t}\n\n\t\t\t\t\tif gConf.GSL.LadybugSrv.Interceptors.Opentracing.Jaeger.SampleRate == 0 {\n\t\t\t\t\t\tgConf.GSL.LadybugSrv.Interceptors.Opentracing.Jaeger.SampleRate = 1\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif gConf.GSL.LadybugCli != nil {\n\n\t\tif gConf.GSL.LadybugCli.Timeout == 0 {\n\t\t\tgConf.GSL.LadybugCli.Timeout = 90 * time.Second\n\t\t}\n\n\t\tif gConf.GSL.LadybugCli.TLS != nil {\n\t\t\tif gConf.GSL.LadybugCli.TLS.TLSCA != \"\" {\n\t\t\t\tgConf.GSL.LadybugCli.TLS.TLSCA = ReplaceEnvPath(gConf.GSL.LadybugCli.TLS.TLSCA)\n\t\t\t}\n\t\t}\n\n\t\tif gConf.GSL.LadybugCli.Interceptors != nil {\n\t\t\tif gConf.GSL.LadybugCli.Interceptors.Opentracing != nil {\n\t\t\t\tif gConf.GSL.LadybugCli.Interceptors.Opentracing.Jaeger != nil {\n\n\t\t\t\t\tif gConf.GSL.LadybugCli.Interceptors.Opentracing.Jaeger.ServiceName == \"\" {\n\t\t\t\t\t\tgConf.GSL.LadybugCli.Interceptors.Opentracing.Jaeger.ServiceName = \"grpc dragonfly client\"\n\t\t\t\t\t}\n\n\t\t\t\t\tif gConf.GSL.LadybugCli.Interceptors.Opentracing.Jaeger.SampleRate == 0 {\n\t\t\t\t\t\tgConf.GSL.LadybugCli.Interceptors.Opentracing.Jaeger.SampleRate = 1\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n// Error - 비 호환 버전에 대한 오류 문자열 반환\nfunc (u *UnsupportedVersionError) Error() string {\n\treturn fmt.Sprintf(\"Unsupported version: %d (wanted: %d)\", u.Have, u.Want)\n}\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// ReplaceEnvPath - $ABC/def ==> /abc/def\nfunc ReplaceEnvPath(str string) string {\n\tif strings.Index(str, \"$\") == -1 {\n\t\treturn str\n\t}\n\n\t// ex) input \"$CBSTORE_ROOT/meta_db/dat\"\n\tstrList := strings.Split(str, \"/\")\n\tfor n, one := range strList {\n\t\tif strings.Index(one, \"$\") != -1 {\n\t\t\tcbstoreRootPath := os.Getenv(strings.Trim(one, \"$\"))\n\t\t\tif cbstoreRootPath == \"\" {\n\t\t\t\tlog.Fatal(one + \" is not set!\")\n\t\t\t}\n\t\t\tstrList[n] = cbstoreRootPath\n\t\t}\n\t}\n\n\tvar resultStr string\n\tfor _, one := range strList {\n\t\tresultStr = resultStr + one + \"/\"\n\t}\n\t// ex) \"/root/go/src/github.com/cloud-barista/cb-spider/meta_db/dat/\"\n\tresultStr = strings.TrimRight(resultStr, \"/\")\n\tresultStr = strings.ReplaceAll(resultStr, \"//\", \"/\")\n\treturn resultStr\n}\nsrc/grpc-api/config/parser.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage config\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"reflect\"\n\t\"unsafe\"\n\n\t\"github.com/spf13/viper\"\n)\n\n// ===== [ Constants and Variables ] =====\n\n// ===== [ Types ] =====\n\n// Parser - Viper lib를 활용하기 위한 Parser 정의 구조 형식\ntype Parser struct {\n\tviper *viper.Viper\n}\n\n// ===== [ Implementations ] =====\n\n// GrpcParse - Viper lib를 이용해서 지정된 CB-GRPC configuration 정보 파싱\nfunc (p Parser) GrpcParse(configFile string) (GrpcConfig, error) {\n\tp.viper.SetConfigFile(configFile)\n\tp.viper.AutomaticEnv()\n\tp.viper.SetConfigType(\"yaml\")\n\n\tvar cfg GrpcConfig\n\n\t// Reading\n\tif err := p.viper.ReadInConfig(); err != nil {\n\t\treturn cfg, checkErr(err, configFile)\n\t}\n\t// Unmarshal to struct\n\tif err := p.viper.Unmarshal(&cfg); err != nil {\n\t\treturn cfg, checkErr(err, configFile)\n\t}\n\t// Initialize\n\tif err := cfg.Init(); err != nil {\n\t\treturn cfg, CheckErr(err, configFile)\n\t}\n\treturn cfg, nil\n}\n\n// ===== [ Private Functions ] =====\n\n// checkErr - Viper lib 처리에서 발생한 오류 반환 (Nested call)\nfunc checkErr(err error, configFile string) error {\n\tswitch e := err.(type) {\n\tcase viper.ConfigParseError:\n\t\tvar subErr error\n\t\tre := reflect.ValueOf(&e).Elem()\n\t\trf := re.Field(0)\n\t\trse := reflect.ValueOf(&subErr).Elem()\n\t\trf = reflect.NewAt(rf.Type(), unsafe.Pointer(rf.UnsafeAddr())).Elem()\n\t\trse.Set(rf)\n\t\treturn checkErr(subErr, configFile)\n\tdefault:\n\t\treturn CheckErr(err, configFile)\n\t}\n}\n\n// ===== [ Public Functions ] =====\n\n// CheckErr - 검증된 오류 정보 반환\nfunc CheckErr(err error, configFile string) error {\n\tswitch e := err.(type) {\n\tcase *os.PathError:\n\t\treturn fmt.Errorf(\"'%s' (%s): %s\", configFile, e.Op, e.Err.Error())\n\tdefault:\n\t\treturn fmt.Errorf(\"'%s': %v\", configFile, err)\n\t}\n}\n\n// MakeParser - Viber lib를 활용하는 설정 Parser 생성\nfunc MakeParser() Parser {\n\treturn Parser{viper.New()}\n}\nsrc/grpc-api/common/cbconnection.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage common\n\nimport (\n\t\"errors\"\n\t\"io\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/jaegertracer\"\n\t\"github.com/opentracing/opentracing-go\"\n\n\tgrpc_accesslog \"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/accesslog\"\n\tgrpc_authjwt \"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/authjwt\"\n\tgrpc_middleware \"github.com/grpc-ecosystem/go-grpc-middleware\"\n\tgrpc_opentracing \"github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing\"\n\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config\"\n)\n\n// ===== [ Constants and Variables ] =====\n\n// ===== [ Types ] =====\n\n// CBConnection - CB-GRPC에서 사용하는 grpc 클라이언트를 위한 Wrapper 구조\ntype CBConnection struct {\n\tConn *grpc.ClientConn\n}\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// NewCBConnection - 초기화된 grpc 클라이언트의 인스턴스 생성\nfunc NewCBConnection(gConf *config.GrpcClientConfig) (*CBConnection, io.Closer, error) {\n\n\tvar (\n\t\ttracer opentracing.Tracer = nil\n\t\tcloser io.Closer          = nil\n\t)\n\n\tif gConf == nil {\n\t\treturn nil, nil, errors.New(\"grpc connection config is null\")\n\t}\n\n\tif gConf.ServerAddr == \"\" {\n\t\treturn nil, nil, errors.New(\"server addr is empty\")\n\t}\n\n\topts := []grpc.DialOption{}\n\n\t// TLS 설정\n\tif gConf.TLS != nil {\n\t\tcreds, err := credentials.NewClientTLSFromFile(gConf.TLS.TLSCA, \"\")\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\topts = append(opts, grpc.WithTransportCredentials(creds))\n\t} else {\n\t\topts = append(opts, grpc.WithInsecure())\n\t}\n\n\t// 인터셉터 설정\n\tunaryIntercepters := []grpc.UnaryClientInterceptor{}\n\tstreamIntercepters := []grpc.StreamClientInterceptor{}\n\n\t// access 로그 인터셉터 기본 설정\n\tunaryIntercepters = append(unaryIntercepters, grpc_accesslog.UnaryClientInterceptor())\n\tstreamIntercepters = append(streamIntercepters, grpc_accesslog.StreamClientInterceptor())\n\n\tif gConf.Interceptors != nil {\n\n\t\t// AuthJWT 인터셉터 설정\n\t\tif gConf.Interceptors.AuthJWT != nil {\n\t\t\tunaryIntercepters = append(unaryIntercepters, grpc_authjwt.UnaryClientInterceptor(gConf.Interceptors.AuthJWT.JWTToken))\n\t\t\tstreamIntercepters = append(streamIntercepters, grpc_authjwt.StreamClientInterceptor(gConf.Interceptors.AuthJWT.JWTToken))\n\t\t}\n\n\t\t// Opentracing 인터셉터 설정\n\t\tif gConf.Interceptors.Opentracing != nil {\n\t\t\ttracer, closer = jaegertracer.InitJaeger(gConf.Interceptors.Opentracing.Jaeger)\n\n\t\t\ttracingOpts := []grpc_opentracing.Option{}\n\t\t\ttracingOpts = append(tracingOpts, grpc_opentracing.WithTracer(tracer))\n\n\t\t\tunaryIntercepters = append(unaryIntercepters, grpc_opentracing.UnaryClientInterceptor(tracingOpts...))\n\t\t\tstreamIntercepters = append(streamIntercepters, grpc_opentracing.StreamClientInterceptor(tracingOpts...))\n\t\t}\n\n\t}\n\n\topts = append(opts, grpc.WithUnaryInterceptor(grpc_middleware.ChainUnaryClient(unaryIntercepters...)))\n\topts = append(opts, grpc.WithStreamInterceptor(grpc_middleware.ChainStreamClient(streamIntercepters...)))\n\tconn, err := grpc.Dial(gConf.ServerAddr, opts...)\n\n\treturn &CBConnection{Conn: conn}, closer, err\n}\nsrc/grpc-api/common/cbmessage.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage common\n\nimport (\n\t\"encoding/json\"\n\t\"strings\"\n\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger\"\n\n\t\"gopkg.in/yaml.v2\"\n)\n\n// ===== [ Constants and Variables ] =====\n\n// ===== [ Types ] =====s\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// ConvertToMessage - 입력 데이터를 grpc 메시지로 변환\nfunc ConvertToMessage(inType string, inData string, obj interface{}) error {\n\tlogger := logger.NewLogger()\n\n\tif inType == \"yaml\" {\n\t\terr := yaml.Unmarshal([]byte(inData), obj)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlogger.Debug(\"yaml Unmarshal: \\n\", obj)\n\t}\n\n\tif inType == \"json\" {\n\t\terr := json.Unmarshal([]byte(inData), obj)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlogger.Debug(\"json Unmarshal: \\n\", obj)\n\t}\n\n\treturn nil\n}\n\n// ConvertToOutput - grpc 메시지를 출력포맷으로 변환\nfunc ConvertToOutput(outType string, obj interface{}) (string, error) {\n\tlogger := logger.NewLogger()\n\n\tif outType == \"yaml\" {\n\t\t// 메시지 포맷에서 불필요한 필드(XXX_로 시작하는 필드)를 제거하기 위해 json 태그를 이용하여 마샬링\n\t\tj, err := json.Marshal(obj)\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\n\t\t// yaml 에서 지원하지 않는 control character 제거\n\t\tcleanStr := strings.Map(func(value rune) rune {\n\t\t\tswitch {\n\t\t\tcase value == 0x09:\n\t\t\t\treturn value\n\t\t\tcase value == 0x0A:\n\t\t\t\treturn value\n\t\t\tcase value == 0x0D:\n\t\t\t\treturn value\n\t\t\tcase value >= 0x20 && value <= 0x7E:\n\t\t\t\treturn value\n\t\t\tcase value == 0x85:\n\t\t\t\treturn value\n\t\t\tcase value >= 0xA0 && value <= 0xD7FF:\n\t\t\t\treturn value\n\t\t\tcase value >= 0xE000 && value <= 0xFFFD:\n\t\t\t\treturn value\n\t\t\tcase value >= 0x10000 && value <= 0x10FFFF:\n\t\t\t\treturn value\n\t\t\tdefault:\n\t\t\t\treturn -1 // control characters are not allowed\n\t\t\t}\n\t\t}, string(j))\n\n\t\t// 필드를 소팅하지 않고 지정된 순서대로 출력하기 위해 MapSlice 이용\n\t\tjsonObj := yaml.MapSlice{}\n\t\terr2 := yaml.Unmarshal([]byte(cleanStr), &jsonObj)\n\t\tif err2 != nil {\n\t\t\treturn \"\", err2\n\t\t}\n\n\t\t// yaml 마샬링\n\t\ty, err3 := yaml.Marshal(jsonObj)\n\t\tif err3 != nil {\n\t\t\treturn \"\", err3\n\t\t}\n\t\tlogger.Debug(\"yaml Marshal: \\n\", string(y))\n\n\t\treturn string(y), nil\n\t}\n\n\tif outType == \"json\" {\n\t\tj, err := json.MarshalIndent(obj, \"\", \"  \")\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\toutStr := string(j)\n\n\t\t// json.Marshal 함수는  <,>, & 문자를 escape 함.. 다시 원래대로 변환\n\t\toutStr = strings.Replace(outStr, \"\\\\u003c\", \"<\", -1)\n\t\toutStr = strings.Replace(outStr, \"\\\\u003e\", \">\", -1)\n\t\toutStr = strings.Replace(outStr, \"\\\\u0026\", \"&\", -1)\n\n\t\tlogger.Debug(\"json Marshal: \\n\", outStr)\n\t\treturn outStr, nil\n\t}\n\n\treturn \"\", nil\n}\n\n// CopySrcToDest - 소스에서 타켓으로 데이터 복사\nfunc CopySrcToDest(src interface{}, dest interface{}) error {\n\tlogger := logger.NewLogger()\n\n\tj, err := json.MarshalIndent(src, \"\", \"  \")\n\tif err != nil {\n\t\treturn err\n\t}\n\tlogger.Debug(\"source value : \\n\", string(j))\n\n\terr = json.Unmarshal(j, dest)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tj, err = json.MarshalIndent(dest, \"\", \"  \")\n\tif err != nil {\n\t\treturn err\n\t}\n\tlogger.Debug(\"target value : \\n\", string(j))\n\n\treturn nil\n}\nsrc/grpc-api/common/cbserver.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage common\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials\"\n\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/jaegertracer\"\n\n\tgrpc_accesslog \"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/accesslog\"\n\tgrpc_authjwt \"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/authjwt\"\n\tgrpc_middleware \"github.com/grpc-ecosystem/go-grpc-middleware\"\n\tgrpc_recovery \"github.com/grpc-ecosystem/go-grpc-middleware/recovery\"\n\tgrpc_opentracing \"github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing\"\n\n\tgrpc_prometheus \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n\n\topentracing \"github.com/opentracing/opentracing-go\"\n\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config\"\n)\n\n// ===== [ Constants and Variables ] =====\n\n// ===== [ Types ] =====\n\n// CBServer - CB-GRPC에서 사용하는 grpc 서버를 위한 Wrapper 구조\ntype CBServer struct {\n\tServer *grpc.Server\n}\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// NewCBServer - 초기화된 grpc 서버의 인스턴스 생성\nfunc NewCBServer(gConf *config.GrpcServerConfig) (*CBServer, io.Closer, error) {\n\n\tvar (\n\t\ttracer      opentracing.Tracer             = nil\n\t\tcloser      io.Closer                      = nil\n\t\treg         *prometheus.Registry           = nil\n\t\tgrpcMetrics *grpc_prometheus.ServerMetrics = nil\n\t)\n\n\tif gConf == nil {\n\t\treturn nil, nil, errors.New(\"grpc server config is null\")\n\t}\n\n\topts := []grpc.ServerOption{}\n\n\t// TLS 설정\n\tif gConf.TLS != nil {\n\t\tcreds, err := credentials.NewServerTLSFromFile(gConf.TLS.TLSCert, gConf.TLS.TLSKey)\n\t\tif err != nil {\n\t\t\treturn nil, nil, err\n\t\t}\n\t\topts = append(opts, grpc.Creds(creds))\n\t}\n\n\t// 인터셉터 설정\n\tunaryIntercepters := []grpc.UnaryServerInterceptor{}\n\tstreamIntercepters := []grpc.StreamServerInterceptor{}\n\n\t// access 로그 인터셉터 기본 설정\n\tunaryIntercepters = append(unaryIntercepters, grpc_accesslog.UnaryServerInterceptor())\n\tstreamIntercepters = append(streamIntercepters, grpc_accesslog.StreamServerInterceptor())\n\n\tif gConf.Interceptors != nil {\n\n\t\t// AuthJWT 인터셉터 설정\n\t\tif gConf.Interceptors.AuthJWT != nil {\n\t\t\tunaryIntercepters = append(unaryIntercepters, grpc_authjwt.UnaryServerInterceptor(gConf.Interceptors.AuthJWT.JWTKey))\n\t\t\tstreamIntercepters = append(streamIntercepters, grpc_authjwt.StreamServerInterceptor(gConf.Interceptors.AuthJWT.JWTKey))\n\t\t}\n\n\t\t// Opentracing 인터셉터 설정\n\t\tif gConf.Interceptors.Opentracing != nil {\n\t\t\tif gConf.Interceptors.Opentracing.Jaeger != nil {\n\t\t\t\ttracer, closer = jaegertracer.InitJaeger(gConf.Interceptors.Opentracing.Jaeger)\n\n\t\t\t\ttracingOpts := []grpc_opentracing.Option{}\n\t\t\t\ttracingOpts = append(tracingOpts, grpc_opentracing.WithTracer(tracer))\n\n\t\t\t\tunaryIntercepters = append(unaryIntercepters, grpc_opentracing.UnaryServerInterceptor(tracingOpts...))\n\t\t\t\tstreamIntercepters = append(streamIntercepters, grpc_opentracing.StreamServerInterceptor(tracingOpts...))\n\t\t\t}\n\t\t}\n\n\t\t// Prometheus Metrics 인터셉터 설정\n\t\tif gConf.Interceptors.PrometheusMetrics != nil {\n\t\t\tgrpcMetrics = grpc_prometheus.NewServerMetrics()\n\t\t\tgrpcMetrics.EnableHandlingTimeHistogram()\n\n\t\t\treg = prometheus.NewRegistry()\n\t\t\treg.MustRegister(grpcMetrics)\n\t\t\treg.MustRegister(prometheus.NewProcessCollector(prometheus.ProcessCollectorOpts{}))\n\t\t\treg.MustRegister(prometheus.NewGoCollector())\n\n\t\t\tunaryIntercepters = append(unaryIntercepters, grpcMetrics.UnaryServerInterceptor())\n\t\t\tstreamIntercepters = append(streamIntercepters, grpcMetrics.StreamServerInterceptor())\n\t\t}\n\n\t}\n\n\t// recovery 인터셉터 기본 설정\n\tunaryIntercepters = append(unaryIntercepters, grpc_recovery.UnaryServerInterceptor())\n\tstreamIntercepters = append(streamIntercepters, grpc_recovery.StreamServerInterceptor())\n\n\topts = append(opts, grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(unaryIntercepters...)))\n\topts = append(opts, grpc.StreamInterceptor(grpc_middleware.ChainStreamServer(streamIntercepters...)))\n\tgs := grpc.NewServer(opts...)\n\n\tif gConf.Interceptors != nil {\n\t\tif gConf.Interceptors.PrometheusMetrics != nil {\n\n\t\t\t// Create a HTTP server for prometheus.\n\t\t\thttpServer := &http.Server{\n\t\t\t\tHandler: promhttp.HandlerFor(reg, promhttp.HandlerOpts{}),\n\t\t\t\tAddr:    fmt.Sprintf(\"0.0.0.0:%d\", gConf.Interceptors.PrometheusMetrics.ListenPort),\n\t\t\t}\n\t\t\t// Initialize all metrics.\n\t\t\tgrpcMetrics.InitializeMetrics(gs)\n\t\t\t// Start your http server for prometheus.\n\t\t\tgo func() {\n\t\t\t\tif err := httpServer.ListenAndServe(); err != nil {\n\t\t\t\t\tlog.Fatal(\"Unable to start a http server for prometheus.\")\n\t\t\t\t}\n\t\t\t}()\n\n\t\t}\n\t}\n\n\treturn &CBServer{Server: gs}, closer, nil\n}\nsrc/grpc-api/common/grpcstatuserr.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage common\n\nimport (\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger\"\n)\n\n// ===== [ Constants and Variables ] =====\n\n// ===== [ Types ] =====\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// ConvGrpcStatusErr - GRPC 상태 코드 에러로 변환\nfunc ConvGrpcStatusErr(err error, tag string, method string) error {\n\tlogger := logger.NewLogger()\n\n\tif err != nil {\n\t\tif errStatus, ok := status.FromError(err); ok {\n\t\t\tlogger.Error(tag, \" error while calling \", method, \" method: \", errStatus.Message())\n\t\t\treturn status.Errorf(errStatus.Code(), \"%s error while calling %s method: %v \", tag, method, errStatus.Message())\n\t\t}\n\t\tlogger.Error(tag, \" error while calling \", method, \" method: \", err)\n\t\treturn status.Errorf(codes.Internal, \"%s error while calling %s method: %v \", tag, method, err)\n\t}\n\n\treturn nil\n}\n\n// NewGrpcStatusErr - GRPC 상태 코드 에러 생성\nfunc NewGrpcStatusErr(msg string, tag string, method string) error {\n\tlogger := logger.NewLogger()\n\n\tlogger.Error(tag, \" error while calling \", method, \" method: \", msg)\n\treturn status.Errorf(codes.Internal, \"%s error while calling %s method: %s \", tag, method, msg)\n}\nsrc/grpc-api/cbadm/cmd/gclient.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/spf13/cobra\"\n\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger\"\n\tlb_api \"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request\"\n)\n\n// ===== [ Constants and Variables ] =====\n\n// ===== [ Types ] =====\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\nfunc readInDataFromFile() {\n\tlogger := logger.NewLogger()\n\tif inData == \"\" {\n\t\tif inFile != \"\" {\n\t\t\tdat, err := ioutil.ReadFile(inFile)\n\t\t\tif err != nil {\n\t\t\t\tlogger.Error(\"failed to read file : \", inFile)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tinData = string(dat)\n\t\t}\n\t}\n}\n\n// ===== [ Public Functions ] =====\n\n// SetupAndRun - Ladybug GRPC CLI 구동\nfunc SetupAndRun(cmd *cobra.Command, args []string) {\n\tlogger := logger.NewLogger()\n\n\tvar (\n\t\tresult string\n\t\terr    error\n\n\t\tmcar *lb_api.MCARApi = nil\n\t)\n\n\t// panic 처리\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlogger.Error(\"cbadm is stopped : \", r)\n\t\t}\n\t}()\n\n\tif cmd.Parent().Name() == \"cluster\" || cmd.Parent().Name() == \"node\" || cmd.Name() == \"healthy\" {\n\t\t// LB API 설정\n\t\tmcar = lb_api.NewMCARManager()\n\t\terr = mcar.SetConfigPath(configFile)\n\t\tif err != nil {\n\t\t\tlogger.Error(\"failed to set config : \", err)\n\t\t\treturn\n\t\t}\n\t\terr = mcar.Open()\n\t\tif err != nil {\n\t\t\tlogger.Error(\"ladybug api open failed : \", err)\n\t\t\treturn\n\t\t}\n\t\tdefer mcar.Close()\n\t}\n\n\t// 입력 파라미터 처리\n\tif outType != \"json\" && outType != \"yaml\" {\n\t\tlogger.Error(\"failed to validate --output parameter : \", outType)\n\t\treturn\n\t}\n\tif inType != \"json\" && inType != \"yaml\" {\n\t\tlogger.Error(\"failed to validate --input parameter : \", inType)\n\t\treturn\n\t}\n\n\tif cmd.Parent().Name() == \"cluster\" || cmd.Parent().Name() == \"node\" || cmd.Name() == \"healthy\" {\n\t\tmcar.SetInType(inType)\n\t\tmcar.SetOutType(outType)\n\t}\n\n\tlogger.Debug(\"--input parameter value : \", inType)\n\tlogger.Debug(\"--output parameter value : \", outType)\n\n\tresult = \"\"\n\terr = nil\n\n\tswitch cmd.Parent().Name() {\n\tcase \"cbadm\":\n\t\tswitch cmd.Name() {\n\t\tcase \"healthy\":\n\t\t\tresult, err = mcar.Healthy()\n\t\t}\n\tcase \"cluster\":\n\t\tswitch cmd.Name() {\n\t\tcase \"create\":\n\t\t\tresult, err = mcar.CreateCluster(inData)\n\t\tcase \"list\":\n\t\t\tresult, err = mcar.ListClusterByParam(nameSpaceID)\n\t\tcase \"get\":\n\t\t\tresult, err = mcar.GetClusterByParam(nameSpaceID, clusterName)\n\t\tcase \"delete\":\n\t\t\tresult, err = mcar.DeleteClusterByParam(nameSpaceID, clusterName)\n\t\t}\n\tcase \"node\":\n\t\tswitch cmd.Name() {\n\t\tcase \"add\":\n\t\t\tresult, err = mcar.AddNode(inData)\n\t\tcase \"list\":\n\t\t\tresult, err = mcar.ListNodeByParam(nameSpaceID, clusterName)\n\t\tcase \"get\":\n\t\t\tresult, err = mcar.GetNodeByParam(nameSpaceID, clusterName, nodeName)\n\t\tcase \"remove\":\n\t\t\tresult, err = mcar.RemoveNodeByParam(nameSpaceID, clusterName, nodeName)\n\t\t}\n\t}\n\n\tif err != nil {\n\t\tif outType == \"yaml\" {\n\t\t\tfmt.Fprintf(cmd.OutOrStdout(), \"message: %v\\n\", err)\n\t\t} else {\n\t\t\tfmt.Fprintf(cmd.OutOrStdout(), \"{\\\"message\\\": \\\"%v\\\"}\\n\", err)\n\t\t}\n\t} else {\n\t\tfmt.Fprintf(cmd.OutOrStdout(), \"%s\\n\", result)\n\t}\n\n}\nsrc/grpc-api/cbadm/cmd/root.go:1: File is not `gofmt`-ed with `-s` (gofmt)\n// Package cmd - 어플리케이션 실행을 위한 Cobra 기반의 CLI Commands 기능 제공\npackage cmd\n\nimport (\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config\"\n\t\"github.com/spf13/cobra\"\n)\n\n// ===== [ Constants and Variables ] =====\n\nconst (\n\t// CLIVersion - cbadm cli 버전\n\tCLIVersion = \"1.0\"\n)\n\nvar (\n\tconfigFile string\n\tinData     string\n\tinFile     string\n\tinType     string\n\toutType    string\n\n\tnameSpaceID string\n\tclusterName string\n\tnodeName    string\n\n\tparser config.Parser\n)\n\n// ===== [ Types ] =====\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// NewRootCmd - 어플리케이션 진입점으로 사용할 Root Cobra Command 생성\nfunc NewRootCmd() *cobra.Command {\n\n\trootCmd := &cobra.Command{\n\t\tUse:   \"cbadm\",\n\t\tShort: \"cbadm is a lightweight grpc cli tool\",\n\t\tLong:  \"This is a lightweight grpc cli tool for Cloud-Barista\",\n\t}\n\n\t// 옵션 플래그 설정\n\trootCmd.PersistentFlags().StringVarP(&configFile, \"config\", \"c\", \"./grpc_conf.yaml\", \"config file\")\n\trootCmd.PersistentFlags().StringVarP(&inType, \"input\", \"i\", \"yaml\", \"input format (json/yaml)\")\n\trootCmd.PersistentFlags().StringVarP(&outType, \"output\", \"o\", \"yaml\", \"output format (json/yaml)\")\n\n\t// Viper 를 사용하는 설정 파서 생성\n\tparser = config.MakeParser()\n\n\t//  Adds the commands for application.\n\trootCmd.AddCommand(NewVersionCmd())\n\n\trootCmd.AddCommand(NewHealthyCmd())\n\trootCmd.AddCommand(NewClusterCmd())\n\trootCmd.AddCommand(NewNodeCmd())\n\n\treturn rootCmd\n}\nsrc/grpc-api/logger/logger.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage logger\n\nimport (\n\t\"io\"\n\t\"io/ioutil\"\n\t\"os\"\n\n\tcblog \"github.com/cloud-barista/cb-log\"\n\t\"github.com/sirupsen/logrus\"\n)\n\n// ===== [ Constants and Variables ] =====\n\n// ===== [ Types ] =====\n\n// Logger - CB-LOG에서 사용하는 \"logrus\" Logger를 위한 Wrapper 구조\ntype Logger struct {\n\t*logrus.Logger\n}\n\n// ===== [ Implementations ] =====\n\n// SetOutput - 로그 출력기 설정\nfunc (l *Logger) SetOutput(w io.Writer) {\n\tl.Logger.Out = w\n}\n\n// DisableOutput - 로그 출력 비활성화\nfunc (l *Logger) DisableOutput() {\n\tl.SetOutput(ioutil.Discard)\n}\n\n// SetFormatter - 로그 포맷터 설정\nfunc (l *Logger) SetFormatter(f logrus.Formatter) {\n\tl.Logger.Formatter = f\n}\n\n// SetLogLevel - 로그 레벨 설정\nfunc (l *Logger) SetLogLevel(lv logrus.Level) {\n\tl.Logger.SetLevel(lv)\n}\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// NewLogger - 초기화된 Logger의 인스턴스 생성\nfunc NewLogger() *Logger {\n\t// CBLOG_ROOT 환경변수가 설정되어 있지 않으면 현재 경로로 환경변수 설정)\n\tenv := os.Getenv(\"CBLOG_ROOT\")\n\tif env == \"\" {\n\t\tif dir, err := os.Getwd(); err == nil {\n\t\t\tos.Setenv(\"CBLOG_ROOT\", dir)\n\t\t}\n\t}\n\n\treturn &Logger{\n\t\tLogger: cblog.GetLogger(\"CB-GRPC\"),\n\t}\n}\nsrc/grpc-api/interceptors/accesslog/client_interceptors.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage accesslog\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger\"\n)\n\n// ===== [ Constants and Variables ] =====\n\n// ===== [ Types ] =====\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// UnaryClientInterceptor - rpc unary call 정보를 기록하는 클라이언트 인터셉터\nfunc UnaryClientInterceptor() grpc.UnaryClientInterceptor {\n\treturn func(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n\t\tstartTime := time.Now()\n\t\terr := invoker(ctx, method, req, reply, cc, opts...)\n\t\telapsed := time.Now().Sub(startTime)\n\n\t\tlogger := logger.NewLogger()\n\t\tlogger.Info(\"grpc client unary call : \", method, \" service [\", elapsed.Nanoseconds()/1000000, \" ms]\")\n\n\t\treturn err\n\t}\n}\n\n// StreamClientInterceptor - rpc stream call 정보를 기록하는 클라이언트 인터셉터\nfunc StreamClientInterceptor() grpc.StreamClientInterceptor {\n\treturn func(ctx context.Context, desc *grpc.StreamDesc, cc *grpc.ClientConn, method string, streamer grpc.Streamer, opts ...grpc.CallOption) (grpc.ClientStream, error) {\n\t\tstartTime := time.Now()\n\t\tclientStream, err := streamer(ctx, desc, cc, method, opts...)\n\t\telapsed := time.Now().Sub(startTime)\n\n\t\tlogger := logger.NewLogger()\n\t\tlogger.Info(\"grpc client stream call : \", method, \" service [\", elapsed.Nanoseconds()/1000000, \" ms]\")\n\n\t\treturn clientStream, err\n\t}\n}\nsrc/grpc-api/interceptors/accesslog/server_interceptors.go:1: File is not `gofmt`-ed with `-s` (gofmt)\npackage accesslog\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/peer\"\n\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger\"\n)\n\n// ===== [ Constants and Variables ] =====\n\n// ===== [ Types ] =====\n\n// ===== [ Implementations ] =====\n\n// ===== [ Private Functions ] =====\n\n// ===== [ Public Functions ] =====\n\n// UnaryServerInterceptor - rpc unary receive 정보를 기록하는 서버 인터셉터\nfunc UnaryServerInterceptor() grpc.UnaryServerInterceptor {\n\treturn func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t\tstartTime := time.Now()\n\t\tresp, err := handler(ctx, req)\n\t\telapsed := time.Now().Sub(startTime)\n\n\t\tclientIP := \"unknown\"\n\t\tif p, ok := peer.FromContext(ctx); ok {\n\t\t\tclientIP = p.Addr.String()\n\t\t}\n\n\t\tlogger := logger.NewLogger()\n\t\tlogger.Info(\"[\", clientIP, \"] grpc server unary received : \", info.FullMethod, \" service [\", elapsed.Nanoseconds()/1000000, \" ms]\")\n\n\t\treturn resp, err\n\t}\n}\n\n// StreamServerInterceptor - rpc stream receive 정보를 기록하는 서버 인터셉터\nfunc StreamServerInterceptor() grpc.StreamServerInterceptor {\n\treturn func(srv interface{}, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t\tstartTime := time.Now()\n\t\terr := handler(srv, stream)\n\t\telapsed := time.Now().Sub(startTime)\n\n\t\tclientIP := \"unknown\"\n\t\tif p, ok := peer.FromContext(stream.Context()); ok {\n\t\t\tclientIP = p.Addr.String()\n\t\t}\n\n\t\tlogger := logger.NewLogger()\n\t\tlogger.Info(\"[\", clientIP, \"] grpc server stream received : \", info.FullMethod, \" service [\", elapsed.Nanoseconds()/1000000, \" ms]\")\n\t\treturn err\n\t}\n}\nsrc/core/model/vm.go:9: File is not `gofmt`-ed with `-s` (gofmt)\n\t\"github.com/cloud-barista/poc-cicd-ladybug/src/utils/config\"\nsrc/core/model/cluster_test.go:9: File is not `gofmt`-ed with `-s` (gofmt)\nconst ()\n\n"},"govet":{"run":1,"cnt":3,"details":"src/core/service/cluster.go:90:8: shadow: declaration of \"err\" shadows declaration at line 49 (govet)\n\t\tvpc, err := nodeConfigInfo.CreateVPC(namespace)\n\t\t     ^\nsrc/core/service/cluster.go:190:3: shadow: declaration of \"err\" shadows declaration at line 49 (govet)\n\t\terr := node.Insert()\n\t\t^\nintegration-test/rest-scenario/echo_call.go:71:8: shadow: declaration of \"err\" shadows declaration at line 51 (govet)\n\t\tres, err := Call(funcs, tc.EchoFunc, c)\n\t\t     ^\n"},"gocyclo":{"run":1,"cnt":11,"details":"src/grpc-api/server/server.go:67:1: cyclomatic complexity 16 of func `configLoad` is high (> 10) (gocyclo)\nfunc configLoad(cf string) (config.GrpcConfig, error) {\n^\nsrc/utils/app/ack.go:48:1: cyclomatic complexity 12 of func `ClusterReqValidate` is high (> 10) (gocyclo)\nfunc ClusterReqValidate(req model.ClusterReq) error {\n^\nsrc/grpc-api/cbadm/cmd/gclient.go:38:1: cyclomatic complexity 28 of func `SetupAndRun` is high (> 10) (gocyclo)\nfunc SetupAndRun(cmd *cobra.Command, args []string) {\n^\nsrc/grpc-api/common/cbmessage.go:46:1: cyclomatic complexity 19 of func `ConvertToOutput` is high (> 10) (gocyclo)\nfunc ConvertToOutput(outType string, obj interface{}) (string, error) {\n^\nsrc/grpc-api/common/cbserver.go:46:1: cyclomatic complexity 12 of func `NewCBServer` is high (> 10) (gocyclo)\nfunc NewCBServer(gConf *config.GrpcServerConfig) (*CBServer, io.Closer, error) {\n^\nsrc/grpc-api/request/mcarapi.go:162:1: cyclomatic complexity 14 of func `(*MCARApi).SetConfigPath` is high (> 10) (gocyclo)\nfunc (m *MCARApi) SetConfigPath(configFile string) error {\n^\nsrc/grpc-api/config/config.go:110:1: cyclomatic complexity 19 of func `(*GrpcConfig).initGlobalParams` is high (> 10) (gocyclo)\nfunc (gConf *GrpcConfig) initGlobalParams() {\n^\nintegration-test/rest-scenario/echo_call.go:47:1: cyclomatic complexity 21 of func `EchoTest` is high (> 10) (gocyclo)\nfunc EchoTest(t *testing.T, tc TestCases) (string, error) {\n^\nsrc/core/service/cluster.go:40:1: cyclomatic complexity 44 of func `CreateCluster` is high (> 10) (gocyclo)\nfunc CreateCluster(namespace string, req *model.ClusterReq) (*model.Cluster, error) {\n^\nsrc/core/service/node.go:40:1: cyclomatic complexity 24 of func `AddNode` is high (> 10) (gocyclo)\nfunc AddNode(namespace string, clusterName string, req *model.NodeReq) (*model.NodeList, error) {\n^\nsrc/core/service/csp.go:48:1: cyclomatic complexity 12 of func `GetVmImageId` is high (> 10) (gocyclo)\nfunc GetVmImageId(csp config.CSP, configName string) (string, error) {\n^\n"},"golint":{"run":1,"cnt":144,"details":"src/utils/lang/functions.go:39:9: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)\n\t} else {\n\t       ^\nsrc/utils/lang/functions.go:48:9: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)\n\t} else {\n\t       ^\nsrc/utils/lang/functions.go:54:6: func GetUid should be GetUID (golint)\nfunc GetUid() string {\n     ^\nsrc/utils/lang/functions.go:108:6: func CheckIpCidr should be CheckIPCidr (golint)\nfunc CheckIpCidr(name string, val string) error {\n     ^\nsrc/utils/lang/functions.go:113:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"%s %s : Type mismatch ex)10.244.0.0/16\", name, val))\n\t\t       ^\nsrc/utils/config/config.go:14:2: struct field `SpiderUrl` should be `SpiderURL` (golint)\n\tSpiderUrl    *string\n\t^\nsrc/utils/config/config.go:15:2: struct field `TumblebugUrl` should be `TumblebugURL` (golint)\n\tTumblebugUrl *string\n\t^\nsrc/utils/config/const.go:6:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tCONTROL_PLANE = \"control-plane\"\n\t^\nsrc/utils/config/const.go:9:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tBOOTSTRAP_FILE               = \"bootstrap.sh\"\n\t^\nsrc/utils/config/const.go:10:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tINIT_FILE                    = \"k8s-init.sh\"\n\t^\nsrc/utils/config/const.go:11:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tLADYBUG_BOOTSTRAP_CANAL_FILE = \"ladybug-bootstrap-canal.sh\"\n\t^\nsrc/utils/config/const.go:12:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tLADYBUG_BOOTSTRAP_KILO_FILE  = \"ladybug-bootstrap-kilo.sh\"\n\t^\nsrc/utils/config/const.go:13:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSYSTEMD_SERVICE_FILE         = \"systemd-service.sh\"\n\t^\nsrc/utils/config/const.go:14:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tHA_PROXY_FILE                = \"haproxy.sh\"\n\t^\nsrc/utils/config/const.go:16:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tCSP_AWS   CSP = \"aws\"\n\t^\nsrc/utils/config/const.go:17:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tCSP_GCP   CSP = \"gcp\"\n\t^\nsrc/utils/config/const.go:18:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tCSP_AZURE CSP = \"azure\"\n\t^\nsrc/utils/config/const.go:20:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tNETWORKCNI_KILO  = \"kilo\"\n\t^\nsrc/utils/config/const.go:21:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tNETWORKCNI_CANAL = \"canal\"\n\t^\nsrc/utils/config/const.go:23:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tPOD_CIDR       = \"10.244.0.0/16\"\n\t^\nsrc/utils/config/const.go:24:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSERVICE_CIDR   = \"10.96.0.0/12\"\n\t^\nsrc/utils/config/const.go:25:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSERVICE_DOMAIN = \"cluster.local\"\n\t^\nsrc/core/model/cluster.go:14:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSTATUS_CREATED      = \"created\"\n\t^\nsrc/core/model/cluster.go:15:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSTATUS_PROVISIONING = \"provisioning\"\n\t^\nsrc/core/model/cluster.go:16:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSTATUS_COMPLETED    = \"completed\"\n\t^\nsrc/core/model/cluster.go:17:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSTATUS_FAILED       = \"failed\"\n\t^\nsrc/core/model/cluster.go:23:2: struct field `UId` should be `UID` (golint)\n\tUId           string `json:\"uid\"`\n\t^\nsrc/core/model/cluster.go:54:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Cluster) Insert() error {\n^\nsrc/core/model/cluster.go:59:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Cluster) Update() error {\n^\nsrc/core/model/cluster.go:64:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Cluster) Complete() error {\n^\nsrc/core/model/cluster.go:69:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Cluster) Fail() error {\n^\nsrc/core/model/cluster.go:74:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Cluster) putStore() error {\n^\nsrc/core/model/cluster.go:84:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Cluster) Select() error {\n^\nsrc/core/model/cluster.go:91:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t       ^\nsrc/core/model/cluster.go:103:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Cluster) Delete() error {\n^\nsrc/core/model/cluster.go:126:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *ClusterList) SelectList() error {\n^\nsrc/core/model/node.go:19:2: struct field `UId` should be `UID` (golint)\n\tUId         string     `json:\"uid\"`\n\t^\nsrc/core/model/node.go:62:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Node) Select() error {\n^\nsrc/core/model/node.go:69:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t       ^\nsrc/core/model/node.go:76:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Node) Insert() error {\n^\nsrc/core/model/node.go:87:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Node) Delete() error {\n^\nsrc/core/model/node.go:97:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *NodeList) SelectList() error {\n^\nsrc/core/model/request.go:29:2: struct field `ServiceDnsDomain` should be `ServiceDNSDomain` (golint)\n\tServiceDnsDomain string `json:\"serviceDnsDomain\"`\n\t^\nsrc/core/model/status.go:4:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSTATUS_UNKNOWN   = 0\n\t^\nsrc/core/model/status.go:5:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSTATUS_SUCCESS   = 1\n\t^\nsrc/core/model/status.go:6:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tSTATUS_NOT_EXIST = 404\n\t^\nsrc/core/model/types.go:4:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tKIND_STATUS       = \"Status\"\n\t^\nsrc/core/model/types.go:5:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tKIND_CLUSTER      = \"Cluster\"\n\t^\nsrc/core/model/types.go:6:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tKIND_CLUSTER_LIST = \"ClusterList\"\n\t^\nsrc/core/model/types.go:7:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tKIND_NODE         = \"Node\"\n\t^\nsrc/core/model/types.go:8:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tKIND_NODE_LIST    = \"NodeList\"\n\t^\nsrc/core/model/vm.go:47:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VM) ConnectionTest(sshInfo *ssh.SSHInfo) error {\n^\nsrc/core/model/vm.go:57:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VM) CopyScripts(sshInfo *ssh.SSHInfo, networkCni string) error {\n^\nsrc/core/model/vm.go:76:11: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn errors.New(fmt.Sprintf(\"copy scripts error (server=%s, cause=%s)\", sshInfo.ServerPort, err))\n\t\t\t       ^\nsrc/core/model/vm.go:83:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VM) SetSystemd(sshInfo *ssh.SSHInfo, networkCni string) error {\n^\nsrc/core/model/vm.go:94:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"create ladybug-bootstrap error (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:100:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"set systemd service error (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:105:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VM) Bootstrap(sshInfo *ssh.SSHInfo) error {\n^\nsrc/core/model/vm.go:114:9: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)\n\t} else {\n\t       ^\nsrc/core/model/vm.go:115:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"k8s bootstrap failed (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:119:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VM) InstallHAProxy(sshInfo *ssh.SSHInfo, IPs []string) error {\n^\nsrc/core/model/vm.go:141:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VM) ControlPlaneInit(sshInfo *ssh.SSHInfo, reqKubernetes Kubernetes) ([]string, string, error) {\n^\nsrc/core/model/vm.go:153:19: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn nil, \"\", errors.New(fmt.Sprintf(\"control palne init failed (name=%s)\", self.Name))\n\t\t                ^\nsrc/core/model/vm.go:165:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VM) InstallNetworkCNI(sshInfo *ssh.SSHInfo, networkCni string) error {\n^\nsrc/core/model/vm.go:183:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VM) ControlPlaneJoin(sshInfo *ssh.SSHInfo, CPJoinCmd *string) error {\n^\nsrc/core/model/vm.go:200:9: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)\n\t} else {\n\t       ^\nsrc/core/model/vm.go:202:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"control-plane join failed (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:206:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VM) WorkerJoin(sshInfo *ssh.SSHInfo, workerJoinCmd *string) error {\n^\nsrc/core/model/vm.go:214:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"worker node join error (name=%s)\", self.Name))\n\t\t       ^\nsrc/core/model/vm.go:222:9: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)\n\t} else {\n\t       ^\nsrc/core/model/vm.go:224:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"worker node join failed (name=%s)\", self.Name))\n\t\t       ^\nsrc/utils/app/ack.go:35:11: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn errors.New(fmt.Sprintf(\"[%s]%s\", err.Key, err.Error()))\n\t\t\t       ^\nsrc/utils/app/ack.go:64:9: `if` block ends with a `return` statement, so drop this `else` and outdent its block (golint)\n\t} else {\n\t       ^\nsrc/core/model/tumblebug/base.go:28:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Model) execute(method string, url string, body interface{}, result interface{}) (bool, error) {\n^\nsrc/core/model/tumblebug/base.go:80:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Model) validate(valid validation.Validation) error {\n^\nsrc/core/model/tumblebug/base.go:85:11: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn errors.New(fmt.Sprintf(\"[%s]%s\", err.Key, err.Error()))\n\t\t\t       ^\nsrc/core/model/tumblebug/base.go:92:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Model) hasResponseMessage(resp *resty.Response) error {\n^\nsrc/core/model/tumblebug/base.go:96:10: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn errors.New(fmt.Sprintf(\"%s\", d[\"message\"]))\n\t\t       ^\nsrc/core/model/tumblebug/firewall.go:17:2: struct field `CspSecurityGroupId` should be `CspSecurityGroupID` (golint)\n\tCspSecurityGroupId   string          `json:\"cspSecurityGroupId\"`   // output\n\t^\nsrc/core/model/tumblebug/firewall.go:41:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Firewall) GET() (bool, error) {\n^\nsrc/core/model/tumblebug/firewall.go:47:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Firewall) POST() error {\n^\nsrc/core/model/tumblebug/firewall.go:57:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Firewall) DELETE(ns string) error {\n^\nsrc/core/model/tumblebug/image.go:14:2: struct field `CspImageId` should be `CspImageID` (golint)\n\tCspImageId   string     `json:\"cspImageId\"`\n\t^\nsrc/core/model/tumblebug/image.go:34:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Image) GET() (bool, error) {\n^\nsrc/core/model/tumblebug/image.go:39:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Image) POST() error {\n^\nsrc/core/model/tumblebug/image.go:48:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Image) DELETE(ns string) error {\n^\nsrc/core/model/tumblebug/mcis.go:25:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *MCIS) GET() (bool, error) {\n^\nsrc/core/model/tumblebug/mcis.go:39:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *MCIS) POST() error {\n^\nsrc/core/model/tumblebug/mcis.go:49:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *MCIS) DELETE() error {\n^\nsrc/core/model/tumblebug/mcis.go:67:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *MCIS) TERMINATE() error {\n^\nsrc/core/model/tumblebug/mcis.go:75:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *MCIS) REFINE() error {\n^\nsrc/core/model/tumblebug/ns.go:24:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *NS) GET() (bool, error) {\n^\nsrc/core/model/tumblebug/spec.go:26:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Spec) GET() (bool, error) {\n^\nsrc/core/model/tumblebug/spec.go:32:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Spec) POST() error {\n^\nsrc/core/model/tumblebug/spec.go:50:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Spec) DELETE(ns string) error {\n^\nsrc/core/model/tumblebug/sshkey.go:27:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *SSHKey) GET() (bool, error) {\n^\nsrc/core/model/tumblebug/sshkey.go:33:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *SSHKey) POST() error {\n^\nsrc/core/model/tumblebug/sshkey.go:50:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *SSHKey) DELETE(ns string) error {\n^\nsrc/core/model/tumblebug/tvm.go:23:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *TVM) GET() (bool, error) {\n^\nsrc/core/model/tumblebug/tvm.go:29:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *TVM) POST() error {\n^\nsrc/core/model/tumblebug/tvm.go:40:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *TVM) DELETE() error {\n^\nsrc/core/model/tumblebug/vpc.go:17:2: struct field `CspVNetId` should be `CspVNetID` (golint)\n\tCspVNetId    string     `json:\"cspVNetId\"`    // output\n\t^\nsrc/core/model/tumblebug/vpc.go:41:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VPC) GET() (bool, error) {\n^\nsrc/core/model/tumblebug/vpc.go:47:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VPC) POST() error {\n^\nsrc/core/model/tumblebug/vpc.go:58:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *VPC) DELETE() error {\n^\nsrc/core/model/spider/connection.go:30:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Connection) GET() (bool, error) {\n^\nsrc/core/model/spider/region.go:32:1: receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\" (golint)\nfunc (self *Region) GET() (bool, error) {\n^\nsrc/core/service/cluster.go:54:19: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn cluster, errors.New(fmt.Sprintf(\"namespace does not exist (name=%s)\", namespace))\n\t\t                ^\nsrc/core/service/common.go:27:16: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn nil, errors.New(fmt.Sprintf(\"%s Connection connect error (connectionName=%s)\", role, nodeConfig.Connection))\n\t\t\t            ^\nsrc/core/service/common.go:30:16: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn nil, errors.New(fmt.Sprintf(\"%s Connection does not exist (connectionName=%s)\", role, nodeConfig.Connection))\n\t\t\t            ^\nsrc/core/service/common.go:40:16: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn nil, errors.New(fmt.Sprintf(\"%s get region error (connectionName=%s)\", role, nodeConfig.Connection))\n\t\t\t            ^\nsrc/core/service/common.go:43:16: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn nil, errors.New(fmt.Sprintf(\"%s region does not exist (connectionName=%s)\", role, nodeConfig.Connection))\n\t\t\t            ^\nsrc/core/service/csp.go:14:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tGCP_IMAGE_ID   = \"https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20201014\"\n\t^\nsrc/core/service/csp.go:15:2: don't use ALL_CAPS in Go names; use CamelCase (golint)\n\tAZURE_IMAGE_ID = \"Canonical:UbuntuServer:18.04-LTS:latest\"\n\t^\nsrc/core/service/csp.go:48:6: func GetVmImageId should be GetVMImageID (golint)\nfunc GetVmImageId(csp config.CSP, configName string) (string, error) {\n     ^\nsrc/core/service/csp.go:62:15: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn \"\", errors.New(fmt.Sprintf(\"request not found AMI on AWS (cause = not found connection config `%s`)\", configName))\n\t\t\t           ^\nsrc/core/service/csp.go:72:15: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn \"\", errors.New(fmt.Sprintf(\"request not found AMI on AWS (cause = not found region, connection='%s', region name='%s')\", configName, conn.RegionName))\n\t\t\t           ^\nsrc/core/service/csp.go:84:15: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn \"\", errors.New(fmt.Sprintf(\"request not found AMI on AWS (cause = region name is empty, connection='%s', region name='%s')\", configName, conn.RegionName))\n\t\t\t           ^\nsrc/core/service/csp.go:88:3: var `imageId` should be `imageID` (golint)\n\t\timageId := imageMap[regionName]\n\t\t^\nsrc/core/service/csp.go:90:15: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn \"\", errors.New(fmt.Sprintf(\"request not found AMI on AWS image map (connection='%s', region='%s')\", configName, regionName))\n\t\t\t           ^\nsrc/core/service/csp.go:97:14: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn \"\", errors.New(fmt.Sprintf(\"CSP '%s' is not supported (Not found \\\"vm-machine-image\\\")\", csp))\n\t\t           ^\nsrc/core/service/mcir.go:51:39: method CreateSshKey should be CreateSSHKey (golint)\nfunc (nodeConfigInfo *NodeConfigInfo) CreateSshKey(namespace string) (*tumblebug.SSHKey, error) {\n                                      ^\nsrc/core/service/mcir.go:72:2: var `imageId` should be `imageID` (golint)\n\timageId, e := GetVmImageId(nodeConfigInfo.Csp, nodeConfigInfo.Connection)\n\t^\nsrc/core/service/node.go:295:15: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn nil, errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t            ^\nsrc/core/service/node.go:316:15: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn nil, errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t            ^\nsrc/core/service/node.go:347:14: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\treturn \"\", errors.New(fmt.Sprintf(\"%s not found\", key))\n\t\t           ^\nintegration-test/rest-scenario/echo_call.go:35:20: error strings should not be capitalized or end with punctuation or a newline (golint)\n\t\terr = errors.New(\"The number of params is not adapted.\")\n\t\t                 ^\nintegration-test/rest-scenario/setup.go:29:2: struct field `HttpMethod` should be `HTTPMethod` (golint)\n\tHttpMethod           string\n\t^\nsrc/rest-api/server.go:12:2: a blank import should be only in a main or test package, or have a comment justifying it (golint)\n\t_ \"github.com/cloud-barista/poc-cicd-ladybug/src/docs\"\n\t^\nsrc/grpc-api/request/mcar/mcar.go:14:6: type name will be used as mcar.MCARRequest by other packages, and that stutters; consider calling this Request (golint)\ntype MCARRequest struct {\n     ^\nsrc/grpc-api/server/mcar/mcar.go:18:6: type name will be used as mcar.MCARService by other packages, and that stutters; consider calling this Service (golint)\ntype MCARService struct {\n     ^\nsrc/grpc-api/server/mcar/mcar.go:32:11: should replace `errors.New(fmt.Sprintf(...))` with `fmt.Errorf(...)` (golint)\n\t\t\treturn errors.New(fmt.Sprintf(\"[%s]%s\", err.Key, err.Error()))\n\t\t\t       ^\nsrc/grpc-api/request/mcarapi.go:64:2: struct field `ServiceDnsDomain` should be `ServiceDNSDomain` (golint)\n\tServiceDnsDomain string `yaml:\"serviceDnsDomain\" json:\"serviceDnsDomain\"`\n\t^\nsrc/grpc-api/request/test/test_api.go:49:1: comment on exported var `AWSCredentialList` should be of the form `AWSCredentialList ...` (golint)\n// AWS credential info\n^\nsrc/grpc-api/request/test/test_api.go:55:1: comment on exported var `GCPCredentialList` should be of the form `GCPCredentialList ...` (golint)\n// GCP credential info\n^\nsrc/grpc-api/request/test/test_api.go:223:6: don't use underscores in Go names; func CIM_Create_Info_Test should be CIMCreateInfoTest (golint)\nfunc CIM_Create_Info_Test() {\n     ^\nsrc/grpc-api/request/test/test_api.go:339:6: func CreateClusterApiTest should be CreateClusterAPITest (golint)\nfunc CreateClusterApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:388:6: func ListClusterApiTest should be ListClusterAPITest (golint)\nfunc ListClusterApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:416:6: func GetClusterApiTest should be GetClusterAPITest (golint)\nfunc GetClusterApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:444:6: func AddNodeApiTest should be AddNodeAPITest (golint)\nfunc AddNodeApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:482:6: func ListNodeApiTest should be ListNodeAPITest (golint)\nfunc ListNodeApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:510:6: func GetNodeApiTest should be GetNodeAPITest (golint)\nfunc GetNodeApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:542:6: func RemoveNodeApiTest should be RemoveNodeAPITest (golint)\nfunc RemoveNodeApiTest() {\n     ^\nsrc/grpc-api/request/test/test_api.go:574:6: func DeleteClusterApiTest should be DeleteClusterAPITest (golint)\nfunc DeleteClusterApiTest() {\n     ^\n"},"ineffassign":{"run":1,"cnt":2,"details":"src/grpc-api/common/cbconnection.go:40:3: ineffectual assignment to tracer (ineffassign)\n\t\ttracer opentracing.Tracer = nil\n\t\t^\nsrc/grpc-api/common/cbserver.go:49:3: ineffectual assignment to tracer (ineffassign)\n\t\ttracer      opentracing.Tracer             = nil\n\t\t^\n"},"misspell":{"run":1,"cnt":0,"details":""}},"test":{"unit":{"run":1,"check":0,"details":"warning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/docs\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm/cmd\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/common\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/accesslog\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/authjwt\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/jaegertracer\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/jwt-gen\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/mcar\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/test\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server/mcar\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/rest-api\nwarning: no packages being tested depend on matches for pattern \n=== RUN   TestRestFull\n=== RUN   TestRestFull/rest_api_full_test_for_mock_driver\n=== RUN   TestRestFull/rest_api_full_test_for_mock_driver/healthy\n--- PASS: TestRestFull (17.69s)\n    --- PASS: TestRestFull/rest_api_full_test_for_mock_driver (17.69s)\n        --- PASS: TestRestFull/rest_api_full_test_for_mock_driver/healthy (0.00s)\nPASS\ncoverage: 0.4% of statements in github.com/cloud-barista/poc-cicd-ladybug/src, github.com/cloud-barista/poc-cicd-ladybug/src/core/common, github.com/cloud-barista/poc-cicd-ladybug/src/core/model, github.com/cloud-barista/poc-cicd-ladybug/src/core/model/spider, github.com/cloud-barista/poc-cicd-ladybug/src/core/model/tumblebug, github.com/cloud-barista/poc-cicd-ladybug/src/core/service, github.com/cloud-barista/poc-cicd-ladybug/src/docs, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm/cmd, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/common, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/accesslog, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/authjwt, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/jaegertracer, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/jwt-gen, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/mcar, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/test, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server/mcar, github.com/cloud-barista/poc-cicd-ladybug/src/rest-api, github.com/cloud-barista/poc-cicd-ladybug/src/rest-api/router, github.com/cloud-barista/poc-cicd-ladybug/src/utils/app, github.com/cloud-barista/poc-cicd-ladybug/src/utils/config, github.com/cloud-barista/poc-cicd-ladybug/src/utils/lang, \nok  \tgithub.com/cloud-barista/poc-cicd-ladybug/integration-test/rest-scenario\t17.705s\tcoverage: 0.4% of statements in github.com/cloud-barista/poc-cicd-ladybug/src, github.com/cloud-barista/poc-cicd-ladybug/src/core/common, github.com/cloud-barista/poc-cicd-ladybug/src/core/model, github.com/cloud-barista/poc-cicd-ladybug/src/core/model/spider, github.com/cloud-barista/poc-cicd-ladybug/src/core/model/tumblebug, github.com/cloud-barista/poc-cicd-ladybug/src/core/service, github.com/cloud-barista/poc-cicd-ladybug/src/docs, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm/cmd, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/common, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/accesslog, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/authjwt, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/jaegertracer, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/jwt-gen, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/mcar, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/test, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server/mcar, github.com/cloud-barista/poc-cicd-ladybug/src/rest-api, github.com/cloud-barista/poc-cicd-ladybug/src/rest-api/router, github.com/cloud-barista/poc-cicd-ladybug/src/utils/app, github.com/cloud-barista/poc-cicd-ladybug/src/utils/config, github.com/cloud-barista/poc-cicd-ladybug/src/utils/lang, \n","allCnt":3,"failCnt":0},"coverage":{"run":1,"check":0,"details":"warning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/docs\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm/cmd\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/common\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/accesslog\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/authjwt\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/jaegertracer\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/jwt-gen\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/mcar\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/test\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server/mcar\nwarning: no packages being tested depend on matches for pattern github.com/cloud-barista/poc-cicd-ladybug/src/rest-api\nwarning: no packages being tested depend on matches for pattern \n=== RUN   TestRestFull\n=== RUN   TestRestFull/rest_api_full_test_for_mock_driver\n=== RUN   TestRestFull/rest_api_full_test_for_mock_driver/healthy\n--- PASS: TestRestFull (17.69s)\n    --- PASS: TestRestFull/rest_api_full_test_for_mock_driver (17.69s)\n        --- PASS: TestRestFull/rest_api_full_test_for_mock_driver/healthy (0.00s)\nPASS\ncoverage: 0.4% of statements in github.com/cloud-barista/poc-cicd-ladybug/src, github.com/cloud-barista/poc-cicd-ladybug/src/core/common, github.com/cloud-barista/poc-cicd-ladybug/src/core/model, github.com/cloud-barista/poc-cicd-ladybug/src/core/model/spider, github.com/cloud-barista/poc-cicd-ladybug/src/core/model/tumblebug, github.com/cloud-barista/poc-cicd-ladybug/src/core/service, github.com/cloud-barista/poc-cicd-ladybug/src/docs, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm/cmd, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/common, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/accesslog, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/authjwt, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/jaegertracer, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/jwt-gen, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/mcar, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/test, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server/mcar, github.com/cloud-barista/poc-cicd-ladybug/src/rest-api, github.com/cloud-barista/poc-cicd-ladybug/src/rest-api/router, github.com/cloud-barista/poc-cicd-ladybug/src/utils/app, github.com/cloud-barista/poc-cicd-ladybug/src/utils/config, github.com/cloud-barista/poc-cicd-ladybug/src/utils/lang, \nok  \tgithub.com/cloud-barista/poc-cicd-ladybug/integration-test/rest-scenario\t17.705s\tcoverage: 0.4% of statements in github.com/cloud-barista/poc-cicd-ladybug/src, github.com/cloud-barista/poc-cicd-ladybug/src/core/common, github.com/cloud-barista/poc-cicd-ladybug/src/core/model, github.com/cloud-barista/poc-cicd-ladybug/src/core/model/spider, github.com/cloud-barista/poc-cicd-ladybug/src/core/model/tumblebug, github.com/cloud-barista/poc-cicd-ladybug/src/core/service, github.com/cloud-barista/poc-cicd-ladybug/src/docs, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/cbadm/cmd, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/common, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/accesslog, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/authjwt, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/jaegertracer, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/jwt-gen, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/mcar, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/request/test, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server, github.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server/mcar, github.com/cloud-barista/poc-cicd-ladybug/src/rest-api, github.com/cloud-barista/poc-cicd-ladybug/src/rest-api/router, github.com/cloud-barista/poc-cicd-ladybug/src/utils/app, github.com/cloud-barista/poc-cicd-ladybug/src/utils/config, github.com/cloud-barista/poc-cicd-ladybug/src/utils/lang, \n","total":"0.4%"}},"gobuild":{"run":1,"check":0,"details":"./cb-artifact-gobuild-1.16/build.log\n\nGolang 1.16 Build Success !!!\n\ngo: downloading github.com/labstack/echo/v4 v4.3.0 go: downloading github.com/swaggo/echo-swagger v1.1.0 go: downloading google.golang.org/grpc v1.26.0 go: downloading github.com/sirupsen/logrus v1.8.1 go: downloading github.com/cloud-barista/cb-store v0.4.1 go: downloading github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751 go: downloading github.com/swaggo/swag v1.7.0 go: downloading github.com/labstack/gommon v0.3.0 go: downloading golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97 go: downloading golang.org/x/net v0.0.0-20210716203947-853a461950ff go: downloading github.com/dgrijalva/jwt-go v3.2.0+incompatible go: downloading github.com/valyala/fasttemplate v1.2.1 go: downloading golang.org/x/time v0.0.0-20210611083556-38a9dc6acbc6 go: downloading github.com/grpc-ecosystem/go-grpc-middleware v1.3.0 go: downloading github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0 go: downloading github.com/opentracing/opentracing-go v1.2.0 go: downloading github.com/prometheus/client_golang v1.11.0 go: downloading gopkg.in/yaml.v2 v2.4.0 go: downloading github.com/spf13/viper v1.8.1 go: downloading github.com/cloud-barista/cb-log v0.4.0 go: downloading github.com/golang/protobuf v1.5.2 go: downloading github.com/beego/beego/v2 v2.0.1 go: downloading github.com/swaggo/files v0.0.0-20190704085106-630677cd5c14 go: downloading github.com/google/uuid v1.3.0 go: downloading golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c go: downloading github.com/cloud-barista/cb-spider v0.4.5 go: downloading github.com/go-resty/resty/v2 v2.6.0 go: downloading github.com/KyleBanks/depth v1.2.1 go: downloading github.com/go-openapi/spec v0.20.3 go: downloading golang.org/x/tools v0.1.5 go: downloading github.com/mattn/go-colorable v0.1.8 go: downloading github.com/mattn/go-isatty v0.0.13 go: downloading github.com/valyala/bytebufferpool v1.0.0 go: downloading github.com/golang-jwt/jwt/v4 v4.0.0 go: downloading github.com/uber/jaeger-client-go v2.29.1+incompatible go: downloading github.com/prometheus/client_model v0.2.0 go: downloading github.com/prometheus/common v0.29.0 go: downloading github.com/beorn7/perks v1.0.1 go: downloading github.com/cespare/xxhash v1.1.0 go: downloading github.com/cespare/xxhash/v2 v2.1.1 go: downloading github.com/prometheus/procfs v0.6.0 go: downloading google.golang.org/genproto v0.0.0-20210719143636-1d5a45f8e492 go: downloading github.com/fsnotify/fsnotify v1.4.9 go: downloading github.com/hashicorp/hcl v1.0.0 go: downloading github.com/magiconair/properties v1.8.5 go: downloading github.com/mitchellh/mapstructure v1.4.1 go: downloading github.com/pelletier/go-toml v1.9.3 go: downloading github.com/spf13/afero v1.6.0 go: downloading github.com/spf13/cast v1.3.1 go: downloading github.com/spf13/jwalterweatherman v1.1.0 go: downloading github.com/spf13/pflag v1.0.5 go: downloading github.com/subosito/gotenv v1.2.0 go: downloading gopkg.in/ini.v1 v1.62.0 go: downloading github.com/gogo/protobuf v1.3.2 go: downloading google.golang.org/protobuf v1.27.1 go: downloading github.com/snowzach/rotatefilehook v0.0.0-20180327172521-2f64f265f58c go: downloading gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b go: downloading github.com/etcd-io/etcd v3.3.25+incompatible go: downloading github.com/xujiajun/nutsdb v0.6.0 go: downloading github.com/bramvdbogaerde/go-scp v1.0.0 go: downloading github.com/go-openapi/jsonpointer v0.19.5 go: downloading github.com/go-openapi/jsonreference v0.19.6 go: downloading github.com/go-openapi/swag v0.19.15 go: downloading golang.org/x/text v0.3.6 go: downloading github.com/uber/jaeger-lib v2.4.1+incompatible go: downloading go.uber.org/atomic v1.9.0 go: downloading github.com/pkg/errors v0.9.1 go: downloading github.com/matttproud/golang_protobuf_extensions v1.0.1 go: downloading gopkg.in/natefinch/lumberjack.v2 v2.0.0 go: downloading github.com/shiena/ansicolor v0.0.0-20200904210342-c7312218db18 go: downloading github.com/coreos/etcd v3.3.25+incompatible go: downloading github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f go: downloading go.uber.org/zap v1.18.1 go: downloading github.com/bwmarrin/snowflake v0.3.0 go: downloading github.com/xujiajun/mmap-go v1.0.1 go: downloading github.com/xujiajun/utils v0.0.0-20190123093513-8bf096c4f53b go: downloading github.com/PuerkitoBio/purell v1.1.1 go: downloading github.com/mailru/easyjson v0.7.7 go: downloading github.com/coreos/go-semver v0.3.0 go: downloading github.com/coreos/go-systemd/v22 v22.0.0 go: downloading go.uber.org/multierr v1.7.0 go: downloading github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578 go: downloading github.com/josharian/intern v1.0.0\n\n"},"deploy":{"dockerBuild":{"run":1,"check":0,"details":"Sending build context to Docker daemon  1.201MB\r\r\nStep 1/20 : FROM golang:1.16-alpine as builder\n1.16-alpine: Pulling from library/golang\n29291e31a76a: Pulling fs layer\ne4bc8fc554c3: Pulling fs layer\n803daa35ea47: Pulling fs layer\nde40ce539e25: Pulling fs layer\nb1d2e2be38c8: Pulling fs layer\nde40ce539e25: Waiting\nb1d2e2be38c8: Waiting\n803daa35ea47: Verifying Checksum\n803daa35ea47: Download complete\ne4bc8fc554c3: Verifying Checksum\ne4bc8fc554c3: Download complete\n29291e31a76a: Verifying Checksum\n29291e31a76a: Download complete\nb1d2e2be38c8: Verifying Checksum\nb1d2e2be38c8: Download complete\n29291e31a76a: Pull complete\ne4bc8fc554c3: Pull complete\n803daa35ea47: Pull complete\nde40ce539e25: Verifying Checksum\nde40ce539e25: Download complete\nde40ce539e25: Pull complete\nb1d2e2be38c8: Pull complete\nDigest: sha256:125b5fbad8200b161d62147f7a38525c97319acf5b44f07e0413199ea749e782\nStatus: Downloaded newer image for golang:1.16-alpine\n ---> cfae2977b751\nStep 2/20 : RUN apk add --no-cache build-base\n ---> Running in 60fb2317c236\nfetch https://dl-cdn.alpinelinux.org/alpine/v3.14/main/x86_64/APKINDEX.tar.gz\nfetch https://dl-cdn.alpinelinux.org/alpine/v3.14/community/x86_64/APKINDEX.tar.gz\n(1/20) Installing libgcc (10.3.1_git20210424-r2)\n(2/20) Installing libstdc++ (10.3.1_git20210424-r2)\n(3/20) Installing binutils (2.35.2-r2)\n(4/20) Installing libmagic (5.40-r1)\n(5/20) Installing file (5.40-r1)\n(6/20) Installing libgomp (10.3.1_git20210424-r2)\n(7/20) Installing libatomic (10.3.1_git20210424-r2)\n(8/20) Installing libgphobos (10.3.1_git20210424-r2)\n(9/20) Installing gmp (6.2.1-r0)\n(10/20) Installing isl22 (0.22-r0)\n(11/20) Installing mpfr4 (4.1.0-r0)\n(12/20) Installing mpc1 (1.2.1-r0)\n(13/20) Installing gcc (10.3.1_git20210424-r2)\n(14/20) Installing musl-dev (1.2.2-r3)\n(15/20) Installing libc-dev (0.7.2-r3)\n(16/20) Installing g++ (10.3.1_git20210424-r2)\n(17/20) Installing make (4.3-r0)\n(18/20) Installing fortify-headers (1.1-r1)\n(19/20) Installing patch (2.7.6-r7)\n(20/20) Installing build-base (0.5-r2)\nExecuting busybox-1.33.1-r3.trigger\nOK: 197 MiB in 35 packages\nRemoving intermediate container 60fb2317c236\n ---> 869ae2685990\nStep 3/20 : ADD . /usr/src/app\n ---> 8fa099a91b5e\nStep 4/20 : WORKDIR /usr/src/app\n ---> Running in 4fac08f40121\nRemoving intermediate container 4fac08f40121\n ---> 8b623dd0a00f\nStep 5/20 : RUN GOOS=linux CGO_ENABLED=0 go build -ldflags '-w -extldflags \"-static\"' -tags cb-ladybug -o cb-ladybug -v src/main.go\n ---> Running in e81a39de5f56\n\u001b[91mgo: downloading google.golang.org/grpc v1.26.0\n\u001b[0m\u001b[91mgo: downloading github.com/sirupsen/logrus v1.8.1\n\u001b[0m\u001b[91mgo: downloading github.com/cloud-barista/cb-store v0.4.1\n\u001b[0m\u001b[91mgo: downloading github.com/labstack/echo/v4 v4.3.0\n\u001b[0m\u001b[91mgo: downloading github.com/swaggo/echo-swagger v1.1.0\n\u001b[0m\u001b[91mgo: downloading github.com/spf13/viper v1.8.1\n\u001b[0m\u001b[91mgo: downloading github.com/grpc-ecosystem/go-grpc-middleware v1.3.0\n\u001b[0m\u001b[91mgo: downloading github.com/grpc-ecosystem/go-grpc-prometheus v1.2.0\ngo: downloading github.com/opentracing/opentracing-go v1.2.0\n\u001b[0m\u001b[91mgo: downloading github.com/prometheus/client_golang v1.11.0\n\u001b[0m\u001b[91mgo: downloading gopkg.in/yaml.v2 v2.4.0\n\u001b[0m\u001b[91mgo: downloading github.com/cloud-barista/cb-log v0.4.0\n\u001b[0m\u001b[91mgo: downloading github.com/golang/protobuf v1.5.2\n\u001b[0m\u001b[91mgo: downloading github.com/beego/beego/v2 v2.0.1\n\u001b[0m\u001b[91mgo: downloading github.com/google/uuid v1.3.0\n\u001b[0m\u001b[91mgo: downloading golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c\n\u001b[0m\u001b[91mgo: downloading github.com/labstack/gommon v0.3.0\n\u001b[0m\u001b[91mgo: downloading golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97\n\u001b[0m\u001b[91mgo: downloading golang.org/x/net v0.0.0-20210716203947-853a461950ff\n\u001b[0m\u001b[91mgo: downloading github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751\n\u001b[0m\u001b[91mgo: downloading github.com/swaggo/swag v1.7.0\n\u001b[0m\u001b[91mgo: downloading github.com/dgrijalva/jwt-go v3.2.0+incompatible\n\u001b[0m\u001b[91mgo: downloading github.com/valyala/fasttemplate v1.2.1\n\u001b[0m\u001b[91mgo: downloading golang.org/x/time v0.0.0-20210611083556-38a9dc6acbc6\n\u001b[0m\u001b[91mgo: downloading github.com/swaggo/files v0.0.0-20190704085106-630677cd5c14\n\u001b[0m\u001b[91mgo: downloading github.com/fsnotify/fsnotify v1.4.9\n\u001b[0m\u001b[91mgo: downloading github.com/hashicorp/hcl v1.0.0\n\u001b[0m\u001b[91mgo: downloading github.com/magiconair/properties v1.8.5\n\u001b[0m\u001b[91mgo: downloading github.com/mitchellh/mapstructure v1.4.1\n\u001b[0m\u001b[91mgo: downloading github.com/pelletier/go-toml v1.9.3\n\u001b[0m\u001b[91mgo: downloading github.com/spf13/afero v1.6.0\n\u001b[0m\u001b[91mgo: downloading github.com/spf13/cast v1.3.1\n\u001b[0m\u001b[91mgo: downloading github.com/spf13/jwalterweatherman v1.1.0\n\u001b[0m\u001b[91mgo: downloading github.com/spf13/pflag v1.0.5\n\u001b[0m\u001b[91mgo: downloading github.com/subosito/gotenv v1.2.0\n\u001b[0m\u001b[91mgo: downloading gopkg.in/ini.v1 v1.62.0\n\u001b[0m\u001b[91mgo: downloading github.com/golang-jwt/jwt/v4 v4.0.0\n\u001b[0m\u001b[91mgo: downloading github.com/uber/jaeger-client-go v2.29.1+incompatible\n\u001b[0m\u001b[91mgo: downloading github.com/prometheus/client_model v0.2.0\n\u001b[0m\u001b[91mgo: downloading github.com/prometheus/common v0.29.0\n\u001b[0m\u001b[91mgo: downloading github.com/beorn7/perks v1.0.1\n\u001b[0m\u001b[91mgo: downloading github.com/cespare/xxhash v1.1.0\n\u001b[0m\u001b[91mgo: downloading github.com/cespare/xxhash/v2 v2.1.1\n\u001b[0m\u001b[91mgo: downloading github.com/prometheus/procfs v0.6.0\n\u001b[0m\u001b[91mgo: downloading google.golang.org/genproto v0.0.0-20210719143636-1d5a45f8e492\n\u001b[0m\u001b[91mgo: downloading github.com/snowzach/rotatefilehook v0.0.0-20180327172521-2f64f265f58c\n\u001b[0m\u001b[91mgo: downloading gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b\n\u001b[0m\u001b[91mgo: downloading github.com/gogo/protobuf v1.3.2\n\u001b[0m\u001b[91mgo: downloading google.golang.org/protobuf v1.27.1\n\u001b[0m\u001b[91mgo: downloading github.com/cloud-barista/cb-spider v0.4.5\n\u001b[0m\u001b[91mgo: downloading github.com/etcd-io/etcd v3.3.25+incompatible\n\u001b[0m\u001b[91mgo: downloading github.com/xujiajun/nutsdb v0.6.0\n\u001b[0m\u001b[91mgo: downloading github.com/mattn/go-colorable v0.1.8\n\u001b[0m\u001b[91mgo: downloading github.com/mattn/go-isatty v0.0.13\n\u001b[0m\u001b[91mgo: downloading github.com/go-resty/resty/v2 v2.6.0\n\u001b[0m\u001b[91mgo: downloading github.com/KyleBanks/depth v1.2.1\n\u001b[0m\u001b[91mgo: downloading github.com/go-openapi/spec v0.20.3\n\u001b[0m\u001b[91mgo: downloading golang.org/x/tools v0.1.5\n\u001b[0m\u001b[91mgo: downloading github.com/valyala/bytebufferpool v1.0.0\n\u001b[0m\u001b[91mgo: downloading golang.org/x/text v0.3.6\n\u001b[0m\u001b[91mgo: downloading github.com/uber/jaeger-lib v2.4.1+incompatible\n\u001b[0m\u001b[91mgo: downloading go.uber.org/atomic v1.9.0\n\u001b[0m\u001b[91mgo: downloading github.com/pkg/errors v0.9.1\n\u001b[0m\u001b[91mgo: downloading github.com/matttproud/golang_protobuf_extensions v1.0.1\n\u001b[0m\u001b[91mgo: downloading gopkg.in/natefinch/lumberjack.v2 v2.0.0\n\u001b[0m\u001b[91mgo: downloading github.com/bramvdbogaerde/go-scp v1.0.0\n\u001b[0m\u001b[91mgo: downloading github.com/shiena/ansicolor v0.0.0-20200904210342-c7312218db18\n\u001b[0m\u001b[91mgo: downloading github.com/coreos/etcd v3.3.25+incompatible\n\u001b[0m\u001b[91mgo: downloading github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f\n\u001b[0m\u001b[91mgo: downloading go.uber.org/zap v1.18.1\n\u001b[0m\u001b[91mgo: downloading github.com/bwmarrin/snowflake v0.3.0\n\u001b[0m\u001b[91mgo: downloading github.com/xujiajun/mmap-go v1.0.1\n\u001b[0m\u001b[91mgo: downloading github.com/xujiajun/utils v0.0.0-20190123093513-8bf096c4f53b\n\u001b[0m\u001b[91mgo: downloading github.com/go-openapi/jsonpointer v0.19.5\n\u001b[0m\u001b[91mgo: downloading github.com/go-openapi/jsonreference v0.19.6\n\u001b[0m\u001b[91mgo: downloading github.com/go-openapi/swag v0.19.15\n\u001b[0m\u001b[91mgo: downloading github.com/coreos/go-semver v0.3.0\n\u001b[0m\u001b[91mgo: downloading github.com/coreos/go-systemd/v22 v22.0.0\n\u001b[0m\u001b[91mgo: downloading go.uber.org/multierr v1.7.0\n\u001b[0m\u001b[91mgo: downloading github.com/PuerkitoBio/purell v1.1.1\n\u001b[0m\u001b[91mgo: downloading github.com/mailru/easyjson v0.7.7\n\u001b[0m\u001b[91mgo: downloading github.com/PuerkitoBio/urlesc v0.0.0-20170810143723-de5bf2ad4578\n\u001b[0m\u001b[91mgo: downloading github.com/josharian/intern v1.0.0\n\u001b[0m\u001b[91mgolang.org/x/sys/internal/unsafeheader\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/flags\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl/hcl/strconv\n\u001b[0m\u001b[91mgolang.org/x/sys/unix\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl/hcl/token\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl/hcl/ast\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl/hcl/scanner\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl/hcl/parser\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl/json/token\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl/json/scanner\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl/json/parser\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl\n\u001b[0m\u001b[91mgithub.com/hashicorp/hcl/hcl/printer\n\u001b[0m\u001b[91mgithub.com/fsnotify/fsnotify\n\u001b[0m\u001b[91mnet\n\u001b[0m\u001b[91mgithub.com/pelletier/go-toml\n\u001b[0m\u001b[91mgithub.com/spf13/afero/mem\n\u001b[0m\u001b[91mgolang.org/x/text/transform\n\u001b[0m\u001b[91mgolang.org/x/text/unicode/norm\n\u001b[0m\u001b[91mcrypto/x509\n\u001b[0m\u001b[91mnet/textproto\n\u001b[0m\u001b[91mvendor/golang.org/x/net/http/httpguts\n\u001b[0m\u001b[91mvendor/golang.org/x/net/http/httpproxy\n\u001b[0m\u001b[91mmime/multipart\n\u001b[0m\u001b[91mcrypto/tls\n\u001b[0m\u001b[91mgithub.com/mitchellh/mapstructure\n\u001b[0m\u001b[91mgithub.com/spf13/cast\n\u001b[0m\u001b[91mgithub.com/spf13/jwalterweatherman\n\u001b[0m\u001b[91mgithub.com/spf13/pflag\n\u001b[0m\u001b[91mgithub.com/subosito/gotenv\n\u001b[0m\u001b[91mnet/http/httptrace\n\u001b[0m\u001b[91mgopkg.in/ini.v1\n\u001b[0m\u001b[91mnet/http\n\u001b[0m\u001b[91mgopkg.in/yaml.v2\n\u001b[0m\u001b[91mgithub.com/sirupsen/logrus\n\u001b[0m\u001b[91mgithub.com/cloud-barista/cb-log/formatter\n\u001b[0m\u001b[91mgopkg.in/natefinch/lumberjack.v2\n\u001b[0m\u001b[91mgithub.com/snowzach/rotatefilehook\n\u001b[0m\u001b[91mgopkg.in/yaml.v3\n\u001b[0m\u001b[91mgithub.com/magiconair/properties\n\u001b[0m\u001b[91mgithub.com/spf13/afero\n\u001b[0m\u001b[91mgithub.com/cloud-barista/cb-log\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/logger\n\u001b[0m\u001b[91mgolang.org/x/net/internal/timeseries\n\u001b[0m\u001b[91mgolang.org/x/net/trace\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/backoff\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/grpclog\n\u001b[0m\u001b[91mgithub.com/spf13/viper\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/connectivity\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/detrand\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/errors\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/encoding/protowire\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/pragma\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/reflect/protoreflect\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/config\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/set\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/version\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/credentials/internal\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/metadata\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/attributes\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/encoding/messageset\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/strs\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/genid\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/encoding/text\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/order\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/reflect/protoregistry\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/runtime/protoiface\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/encoding/defval\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/proto\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/descfmt\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/descopts\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/serviceconfig\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/grpcrand\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/codes\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/encoding/prototext\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/filedesc\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/encoding\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/backoff\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/balancerload\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/buffer\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/envconfig\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/grpcsync\n\u001b[0m\u001b[91mgolang.org/x/text/unicode/bidi\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/encoding/tag\n\u001b[0m\u001b[91mgolang.org/x/text/secure/bidirule\n\u001b[0m\u001b[91mgolang.org/x/net/idna\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/impl\n\u001b[0m\u001b[91mgolang.org/x/net/http/httpguts\n\u001b[0m\u001b[91mgolang.org/x/net/http2/hpack\n\u001b[0m\u001b[91mgolang.org/x/net/http2\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/syscall\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/keepalive\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/stats\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/tap\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/naming\n\u001b[0m\u001b[91mnet/http/httputil\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/internal/filetype\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/runtime/protoimpl\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/types/descriptorpb\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/types/known/anypb\n\u001b[0m\u001b[91mgithub.com/golang/protobuf/ptypes/any\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/types/known/durationpb\n\u001b[0m\u001b[91mgithub.com/golang/protobuf/ptypes/duration\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/types/known/timestamppb\n\u001b[0m\u001b[91mgithub.com/golang/protobuf/ptypes/timestamp\n\u001b[0m\u001b[91mgoogle.golang.org/genproto/googleapis/rpc/status\n\u001b[0m\u001b[91mgoogle.golang.org/protobuf/reflect/protodesc\n\u001b[0m\u001b[91mgithub.com/golang-jwt/jwt/v4\n\u001b[0m\u001b[91mgithub.com/opentracing/opentracing-go/log\n\u001b[0m\u001b[91mgithub.com/opentracing/opentracing-go\n\u001b[0m\u001b[91mgithub.com/opentracing/opentracing-go/ext\n\u001b[0m\u001b[91mgithub.com/golang/protobuf/proto\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/internal/baggage\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/internal/reporterstats\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/internal/spanlog\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/internal/throttler\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/log\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/thrift\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/credentials\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/resolver\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/balancer\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/balancer/base\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/balancer/roundrobin\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/encoding/proto\n\u001b[0m\u001b[91mgithub.com/golang/protobuf/ptypes\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/status\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/channelz\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/binarylog\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/resolver/dns\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/resolver/passthrough\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/peer\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/thrift-gen/jaeger\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/internal/transport\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/thrift-gen/sampling\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/thrift-gen/zipkincore\n\u001b[0m\u001b[91mgoogle.golang.org/grpc\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/thrift-gen/agent\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/utils\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-lib/metrics\n\u001b[0m\u001b[91mgo.uber.org/atomic\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/accesslog\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/authjwt\n\u001b[0m\u001b[91mgithub.com/pkg/errors\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/thrift-gen/baggage\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/internal/throttler/remote\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/rpcmetrics\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/internal/baggage/remote\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/transport\n\u001b[0m\u001b[91mgithub.com/grpc-ecosystem/go-grpc-middleware\n\u001b[0m\u001b[91mgithub.com/uber/jaeger-client-go/config\n\u001b[0m\u001b[91mgithub.com/grpc-ecosystem/go-grpc-middleware/recovery\n\u001b[0m\u001b[91mgithub.com/grpc-ecosystem/go-grpc-middleware/tags\n\u001b[0m\u001b[91mgithub.com/grpc-ecosystem/go-grpc-middleware/util/metautils\n\u001b[0m\u001b[91mgithub.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/interceptors/jaegertracer\n\u001b[0m\u001b[91mexpvar\n\u001b[0m\u001b[91mgithub.com/beorn7/perks/quantile\n\u001b[0m\u001b[91mgithub.com/cespare/xxhash/v2\n\u001b[0m\u001b[91mgithub.com/prometheus/client_model/go\n\u001b[0m\u001b[91mgithub.com/matttproud/golang_protobuf_extensions/pbutil\n\u001b[0m\u001b[91mgithub.com/prometheus/common/internal/bitbucket.org/ww/goautoneg\n\u001b[0m\u001b[91mgithub.com/prometheus/common/model\n\u001b[0m\u001b[91mgithub.com/prometheus/client_golang/prometheus/internal\n\u001b[0m\u001b[91mgithub.com/prometheus/procfs/internal/fs\n\u001b[0m\u001b[91mgithub.com/prometheus/procfs/internal/util\n\u001b[0m\u001b[91mgithub.com/prometheus/procfs\n\u001b[0m\u001b[91mgithub.com/prometheus/common/expfmt\n\u001b[0m\u001b[91mgolang.org/x/net/context\n\u001b[0m\u001b[91mgithub.com/gogo/protobuf/proto\n\u001b[0m\u001b[91mgithub.com/prometheus/client_golang/prometheus\n\u001b[0m\u001b[91mgithub.com/grpc-ecosystem/go-grpc-prometheus\n\u001b[0m\u001b[91mgithub.com/prometheus/client_golang/prometheus/promhttp\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/common\n\u001b[0m\u001b[91mgithub.com/shiena/ansicolor\n\u001b[0m\u001b[91mnet/smtp\n\u001b[0m\u001b[91mgithub.com/beego/beego/v2/core/logs\n\u001b[0m\u001b[91mgithub.com/gogo/protobuf/protoc-gen-gogo/descriptor\n\u001b[0m\u001b[91mgithub.com/beego/beego/v2/core/validation\n\u001b[0m\u001b[91mgolang.org/x/crypto/internal/subtle\n\u001b[0m\u001b[91mgolang.org/x/crypto/chacha20\n\u001b[0m\u001b[91mgolang.org/x/crypto/curve25519/internal/field\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/protobuf/gogoproto\n\u001b[0m\u001b[91mgolang.org/x/crypto/curve25519\n\u001b[0m\u001b[91mgolang.org/x/crypto/ed25519\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/protobuf/cbladybug\n\u001b[0m\u001b[91mgolang.org/x/crypto/poly1305\n\u001b[0m\u001b[91mgolang.org/x/crypto/blowfish\n\u001b[0m\u001b[91mgolang.org/x/crypto/ssh/internal/bcrypt_pbkdf\n\u001b[0m\u001b[91mgolang.org/x/crypto/ssh\n\u001b[0m\u001b[91mgithub.com/cloud-barista/cb-store/config\n\u001b[0m\u001b[91mgithub.com/cloud-barista/cb-store/interfaces\n\u001b[0m\u001b[91mgithub.com/gogo/protobuf/gogoproto\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/auth/authpb\n\u001b[0m\u001b[91mgo.uber.org/multierr\n\u001b[0m\u001b[91mgo.uber.org/zap/buffer\n\u001b[0m\u001b[91mgo.uber.org/zap/internal/bufferpool\n\u001b[0m\u001b[91mgo.uber.org/zap/internal/color\n\u001b[0m\u001b[91mgo.uber.org/zap/internal/exit\n\u001b[0m\u001b[91mgo.uber.org/zap/zapcore\n\u001b[0m\u001b[91mgithub.com/bramvdbogaerde/go-scp\n\u001b[0m\u001b[91mgolang.org/x/crypto/ssh/agent\n\u001b[0m\u001b[91mgo.uber.org/zap\n\u001b[0m\u001b[91mgithub.com/bramvdbogaerde/go-scp/auth\n\u001b[0m\u001b[91mgithub.com/cloud-barista/cb-spider/cloud-control-manager/vm-ssh\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/resolver/dns\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/resolver/passthrough\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/clientv3/balancer/resolver/endpoint\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/etcdserver/api/v3rpc/rpctypes\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/clientv3/credentials\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/mvcc/mvccpb\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/clientv3/balancer/connectivity\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/clientv3/balancer/picker\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/clientv3/balancer\n\u001b[0m\u001b[91mgoogle.golang.org/genproto/googleapis/api/annotations\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/pkg/systemd\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/raft/raftpb\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/etcdserver/etcdserverpb\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/raft\n\u001b[0m\u001b[91mgithub.com/coreos/go-systemd/journal\n\u001b[0m\u001b[91mlog/syslog\n\u001b[0m\u001b[91mgithub.com/coreos/pkg/capnslog\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/pkg/logutil\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/pkg/types\n\u001b[0m\u001b[91mgithub.com/coreos/go-semver/semver\n\u001b[0m\u001b[91mgithub.com/coreos/etcd/version\n\u001b[0m\u001b[91mgithub.com/google/uuid\n\u001b[0m\u001b[91mgithub.com/bwmarrin/snowflake\n\u001b[0m\u001b[91mgithub.com/xujiajun/mmap-go\n\u001b[0m\u001b[91mgithub.com/xujiajun/nutsdb/ds/list\n\u001b[0m\u001b[91mgithub.com/xujiajun/nutsdb/ds/set\n\u001b[0m\u001b[91mgithub.com/xujiajun/nutsdb/ds/zset\n\u001b[0m\u001b[91mgithub.com/xujiajun/utils/filesystem\n\u001b[0m\u001b[91mgithub.com/xujiajun/utils/strconv2\n\u001b[0m\u001b[91mgithub.com/xujiajun/nutsdb\n\u001b[0m\u001b[91mgithub.com/cloud-barista/cb-store/store-drivers/nutsdb-driver\n\u001b[0m\u001b[91mgithub.com/mattn/go-isatty\n\u001b[0m\u001b[91mgithub.com/mattn/go-colorable\n\u001b[0m\u001b[91mgithub.com/labstack/gommon/color\n\u001b[0m\u001b[91mgithub.com/valyala/bytebufferpool\n\u001b[0m\u001b[91mgithub.com/valyala/fasttemplate\n\u001b[0m\u001b[91mgithub.com/labstack/gommon/log\n\u001b[0m\u001b[91mgolang.org/x/crypto/acme\n\u001b[0m\u001b[91mgolang.org/x/crypto/acme/autocert\n\u001b[0m\u001b[91mgithub.com/etcd-io/etcd/clientv3\n\u001b[0m\u001b[91mgolang.org/x/net/http2/h2c\n\u001b[0m\u001b[91mgithub.com/labstack/echo/v4\n\u001b[0m\u001b[91mgithub.com/cloud-barista/cb-store/store-drivers/etcd-driver\n\u001b[0m\u001b[91mgithub.com/cloud-barista/cb-store\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/utils/lang\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/core/common\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/utils/config\n\u001b[0m\u001b[91mnet/http/cookiejar\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/core/model\n\u001b[0m\u001b[91mgolang.org/x/net/publicsuffix\n\u001b[0m\u001b[91mgithub.com/golang/protobuf/protoc-gen-go/descriptor\n\u001b[0m\u001b[91mgithub.com/go-resty/resty/v2\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/reflection/grpc_reflection_v1alpha\n\u001b[0m\u001b[91mgoogle.golang.org/grpc/reflection\n\u001b[0m\u001b[91mgithub.com/alecthomas/template/parse\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/utils/app\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/core/model/spider\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/core/model/tumblebug\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/core/service\n\u001b[0m\u001b[91mgithub.com/alecthomas/template\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server/mcar\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/grpc-api/server\n\u001b[0m\u001b[91mgithub.com/KyleBanks/depth\n\u001b[0m\u001b[91mgithub.com/josharian/intern\n\u001b[0m\u001b[91mgithub.com/mailru/easyjson/jlexer\n\u001b[0m\u001b[91mgithub.com/mailru/easyjson/buffer\n\u001b[0m\u001b[91mgithub.com/mailru/easyjson/jwriter\n\u001b[0m\u001b[91mgithub.com/PuerkitoBio/urlesc\n\u001b[0m\u001b[91mgolang.org/x/text/width\n\u001b[0m\u001b[91mgithub.com/go-openapi/swag\n\u001b[0m\u001b[91mgithub.com/PuerkitoBio/purell\n\u001b[0m\u001b[91mgolang.org/x/tools/internal/typeparams\n\u001b[0m\u001b[91mgolang.org/x/tools/go/ast/astutil\n\u001b[0m\u001b[91mgithub.com/go-openapi/jsonpointer\n\u001b[0m\u001b[91mgithub.com/go-openapi/jsonreference\n\u001b[0m\u001b[91mgithub.com/go-openapi/spec\n\u001b[0m\u001b[91mgolang.org/x/tools/go/buildutil\n\u001b[0m\u001b[91mgolang.org/x/sys/execabs\n\u001b[0m\u001b[91mgolang.org/x/tools/go/internal/cgo\n\u001b[0m\u001b[91mgolang.org/x/tools/go/loader\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/rest-api/router\n\u001b[0m\u001b[91mgithub.com/swaggo/swag\n\u001b[0m\u001b[91mgithub.com/dgrijalva/jwt-go\n\u001b[0m\u001b[91mgithub.com/labstack/gommon/bytes\n\u001b[0m\u001b[91mgithub.com/labstack/gommon/random\n\u001b[0m\u001b[91mgolang.org/x/time/rate\n\u001b[0m\u001b[91mgithub.com/labstack/echo/v4/middleware\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/docs\n\u001b[0m\u001b[91mgolang.org/x/net/webdav/internal/xml\n\u001b[0m\u001b[91mgolang.org/x/net/webdav\n\u001b[0m\u001b[91mgithub.com/swaggo/files\n\u001b[0m\u001b[91mgithub.com/swaggo/echo-swagger\n\u001b[0m\u001b[91mgithub.com/cloud-barista/poc-cicd-ladybug/src/rest-api\n\u001b[0m\u001b[91mcommand-line-arguments\n\u001b[0mRemoving intermediate container e81a39de5f56\n ---> 227e92f70934\nStep 6/20 : FROM scratch as prod\n ---> \nStep 7/20 : COPY --from=builder /usr/src/app/conf/ /app/conf/\n ---> 58cf5dc89f56\nStep 8/20 : COPY --from=builder /usr/src/app/cb-ladybug /app/\n ---> 09e362a61ba3\nStep 9/20 : COPY --from=builder /usr/src/app/src/scripts/ /app/src/scripts/\n ---> 65d4650bf780\nStep 10/20 : ENV CBLOG_ROOT \"/app\"\n ---> Running in a3cc7dbf12b6\nRemoving intermediate container a3cc7dbf12b6\n ---> a0bf42fa4fda\nStep 11/20 : ENV CBSTORE_ROOT \"/app\"\n ---> Running in 3470ce3f8a1d\nRemoving intermediate container 3470ce3f8a1d\n ---> 613329dbe649\nStep 12/20 : ENV APP_ROOT \"/app\"\n ---> Running in 87921a4e42d4\nRemoving intermediate container 87921a4e42d4\n ---> 0aa3b7197c03\nStep 13/20 : ENV SPIDER_URL http://cb-spider:1024/spider\n ---> Running in 81d144f93495\nRemoving intermediate container 81d144f93495\n ---> c75905b25199\nStep 14/20 : ENV TUMBLEBUG_URL http://cb-tumblebug:1323/tumblebug\n ---> Running in ee4199671dde\nRemoving intermediate container ee4199671dde\n ---> 675c159010e6\nStep 15/20 : ENV BASE_PATH /ladybug\n ---> Running in ed098a94c031\nRemoving intermediate container ed098a94c031\n ---> 4eb7e4ea9afb\nStep 16/20 : ENV API_USERNAME default\n ---> Running in c1fe62dbbf81\nRemoving intermediate container c1fe62dbbf81\n ---> a7904e9a5d99\nStep 17/20 : ENV API_PASSWORD default\n ---> Running in 65fa9dc6a2ae\nRemoving intermediate container 65fa9dc6a2ae\n ---> aae92bf59b77\nStep 18/20 : ENTRYPOINT [ \"/app/cb-ladybug\" ]\n ---> Running in b6a60a1eda29\nRemoving intermediate container b6a60a1eda29\n ---> 826feeae18f5\nStep 19/20 : EXPOSE 8080\n ---> Running in 7418053a58cd\nRemoving intermediate container 7418053a58cd\n ---> d247d61433ac\nStep 20/20 : EXPOSE 50254\n ---> Running in bf938d652c32\nRemoving intermediate container bf938d652c32\n ---> ffca3a5cda4e\nSuccessfully built ffca3a5cda4e\n"},"publish":{"run":0,"check":0,"details":""}},"selfhost":{"run":1,"check":0,"details":"Linux ip-172-31-1-133 5.4.0-1045-aws #47~18.04.1-Ubuntu SMP Tue Apr 13 15:58:14 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\n"}}